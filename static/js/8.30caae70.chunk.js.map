{"version":3,"sources":["components/UI/Collapsible.tsx","components/UI/Collapsible.module.scss","components/Article/Article.tsx"],"names":["Collapsible","header","centered","collapsed","children","className","props","useState","isCollapsed","setIsCollapsed","styles","collapsibleContainer","collapsibleTitle","onClick","module","exports","PageViewType","TableOfContents","sectionHeaders","length","tableOfContents","map","level","text","href","style","marginLeft","TagViews","tags","id","tagView","tag","ArticleComponent","article","inRecycling","history","useHistory","dispatch","useAppDispatch","isAdmin","useAppSelector","selectLoginType","LoginType","Admin","name","content","migrationTitleName","updateMigrationTitleName","Reading","lastViewType","updateLastViewType","viewType","updateViewType","processedMarkdown","preprocessMarkdown","toggleView","target","standardAdminControls","styledAs","Editting","Migration","recyclingAdminControls","a","confirm","restoreArticle","push","validPageLink","articleControls","deleteBtn","deleteArticle","title","headers","processed","currentArticle","label","changeHandler","e","value","defaultValue","console","log","alert","migrateArticle","newName","payload"],"mappings":"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","file":"static/js/8.30caae70.chunk.js","sourcesContent":["import styles from \"./Collapsible.module.scss\";\r\nimport React, { useState } from \"react\";\r\n\r\nfunction Collapsible({\r\n  header,\r\n  centered = false,\r\n  collapsed = false,\r\n  children,\r\n  className,\r\n  ...props\r\n}: {\r\n  header: string | React.ReactNode;\r\n  collapsed?: boolean;\r\n  centered?: boolean;\r\n  children: React.ReactNode;\r\n} & React.HTMLAttributes<HTMLDivElement>\r\n) {\r\n  const [isCollapsed, setIsCollapsed] = useState(collapsed);\r\n\r\n\r\n  return (\r\n    <div\r\n      className={`${styles.collapsibleContainer} ${className || \"\"}`}\r\n      {...props}\r\n    >\r\n      <div\r\n        className={styles.collapsibleTitle + \" \" + (centered && styles.centered) || \"\"}\r\n        onClick={() =>\r\n          setIsCollapsed((isCollapsed) => !isCollapsed)\r\n        }\r\n      >\r\n        <p>{header}</p>\r\n        <div className={`material-icons + ${isCollapsed ? styles.collapsed : \"\"}`}>\r\n          expand_more\r\n        </div>\r\n      </div>\r\n\r\n      {(!isCollapsed) && children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Collapsible;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"collapsibleContainer\":\"Collapsible_collapsibleContainer__1frp_\",\"collapsibleTitle\":\"Collapsible_collapsibleTitle__2U45i\",\"collapsed\":\"Collapsible_collapsed__3OQ9_\",\"centered\":\"Collapsible_centered__2bh--\"};","import styles from \"components/Article/Article.module.scss\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { useAppSelector, useAppDispatch } from \"app/hooks\";\r\nimport { migrateArticle, deleteArticle, restoreArticle, Article } from \"app/articlesSlice\";\r\nimport { LoginType, selectLoginType } from \"app/adminSlice\";\r\n\r\nimport { validPageLink } from \"utils/functions\";\r\nimport { preprocessMarkdown, HeaderInformation } from \"utils/preprocessMarkdown\";\r\n\r\nimport MarkdownRender from \"components/Article/MarkdownRender\";\r\nimport Collapsible from \"components/UI/Collapsible\";\r\n\r\nimport Input from \"components/Form/Input\";\r\nimport Button from \"components/UI/Button\";\r\n\r\nimport Admin from \"pages/Admin/Admin\";\r\n\r\nfunction TableOfContents({ sectionHeaders }: { sectionHeaders: HeaderInformation[]; }) {\r\n  return (sectionHeaders.length > 0) ? (\r\n    <Collapsible\r\n      className={styles.tableOfContents}\r\n      header=\"Table of Contents\"\r\n      centered={true}\r\n    >\r\n      <nav>\r\n        {\r\n          sectionHeaders.map(({ level, text }) => (\r\n            <a key={text} href={\"#\" + text}>\r\n              <p style={{\r\n                marginLeft: `${(level - 1) * 2}em`\r\n              }}>\r\n                &bull; {text}\r\n              </p>\r\n            </a>\r\n          ))\r\n        }\r\n      </nav>\r\n    </Collapsible>\r\n  ) : null;\r\n}\r\n\r\nfunction TagViews({ tags }: { tags?: string[]; }) {\r\n  return (\r\n    <div id={styles.tagView}>\r\n      {\r\n        (tags) ? (\r\n          <>\r\n            <h5>This article was tagged with: </h5>\r\n            {tags.map((tag) => <p key={tag}>{tag}</p>)}\r\n          </>\r\n        ) : (\r\n          <h5>This article has not been tagged.</h5>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nenum PageViewType {\r\n  Reading,\r\n  Editting,\r\n  Migration,\r\n}\r\n\r\ninterface ArticleProperties {\r\n  inRecycling: boolean,\r\n  article: Article,\r\n}\r\n\r\nfunction ArticleComponent({ article, inRecycling }: ArticleProperties) {\r\n  const history = useHistory();\r\n  const dispatch = useAppDispatch();\r\n  const currentLoginType = useAppSelector(selectLoginType);\r\n  const isAdmin = currentLoginType === LoginType.Admin;\r\n\r\n  const { name, content } = article;\r\n  const [migrationTitleName, updateMigrationTitleName] = useState(name);\r\n\r\n  const [lastViewType, updateLastViewType] = useState(PageViewType.Reading);\r\n  const [viewType, updateViewType] = useState(PageViewType.Reading);\r\n\r\n  const processedMarkdown = preprocessMarkdown(content);\r\n\r\n  function toggleView(target: PageViewType) {\r\n    if (viewType !== target) {\r\n      updateViewType(target);\r\n      updateLastViewType(viewType);\r\n    } else {\r\n      updateViewType(lastViewType);\r\n    }\r\n  }\r\n\r\n  const standardAdminControls = (\r\n    <>\r\n      <Button\r\n        styledAs=\"oval\"\r\n        onClick={() => toggleView(PageViewType.Editting)}\r\n      >\r\n        Edit This Page\r\n      </Button>\r\n      <Button\r\n        onClick={() => toggleView(PageViewType.Migration)}\r\n        styledAs=\"oval\">\r\n        Migrate Page\r\n      </Button>\r\n    </>\r\n  );\r\n\r\n  const recyclingAdminControls = (\r\n    <>\r\n      <Button\r\n        styledAs=\"oval\"\r\n        onClick={async () => {\r\n          if (confirm(\"Do you want to restore this article?\")) {\r\n            await dispatch(restoreArticle(name));\r\n            history.push(validPageLink(name));\r\n          }\r\n        }}\r\n      >\r\n        Restore Article\r\n      </Button>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {\r\n        (isAdmin) && (\r\n          <div id={styles.articleControls}>\r\n            {(!inRecycling) ? standardAdminControls : recyclingAdminControls}\r\n            <Button\r\n              id={styles.deleteBtn}\r\n              styledAs=\"oval\"\r\n              onClick={() => {\r\n                if (confirm((inRecycling) ? \"Permenantly delete this article?\" : \"Recycle this article?\")) {\r\n                  dispatch(deleteArticle(name));\r\n                  history.push(\"/\");\r\n                }\r\n              }}\r\n            >\r\n              Delete Page\r\n            </Button>\r\n          </div>\r\n        )\r\n      }\r\n      {\r\n        function () {\r\n          switch (viewType) {\r\n          case PageViewType.Reading:\r\n            return (\r\n              <>\r\n                <h1 className={styles.title}> {name} </h1>\r\n                <TableOfContents sectionHeaders={processedMarkdown.headers} />\r\n                <MarkdownRender className={styles.article}>\r\n                  {processedMarkdown.processed}\r\n                </MarkdownRender>\r\n                <TagViews tags={article.tags} />\r\n              </>\r\n            );\r\n          case PageViewType.Editting:\r\n            return isAdmin && <Admin currentArticle={article} />;\r\n          case PageViewType.Migration:\r\n            return (\r\n              <>\r\n                <h1>Page Migration</h1>\r\n                <Input\r\n                  label=\"Migration Title\"\r\n                  changeHandler={(e) => updateMigrationTitleName(e.target.value)}\r\n                  defaultValue={migrationTitleName}\r\n                  value={migrationTitleName} />\r\n                <Button\r\n                  onClick={\r\n                    async function () {\r\n                      console.log(migrationTitleName, name);\r\n                      if (migrationTitleName === name) {\r\n                        alert(\"You cannot migrate a page unto itself!\");\r\n                      } else {\r\n                        const dispatchResult = await dispatch(migrateArticle({ name, newName: migrationTitleName }));\r\n                        if (dispatchResult.payload) {\r\n                          history.push(validPageLink(migrationTitleName));\r\n                        }\r\n                      }\r\n                    }\r\n                  }>Migrate Page</Button>\r\n              </>\r\n            );\r\n          }\r\n        }()\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ArticleComponent;\r\n"],"sourceRoot":""}