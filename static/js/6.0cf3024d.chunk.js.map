{"version":3,"sources":["components/UI/Collapsible.tsx","components/UI/Collapsible.module.scss","components/Article/MediaShareBtns.module.scss","components/Article/TableOfContents.module.scss","components/Article/TagViews.module.scss","components/Article/MediaShareBtns.tsx","components/Article/TableOfContents.tsx","components/Article/TagViews.tsx","components/Article/Article.tsx"],"names":["Collapsible","header","centered","collapsed","children","className","props","useState","isCollapsed","setIsCollapsed","cn","styles","collapsibleContainer","collapsibleTitle","onClick","module","exports","MediaShareBtns","title","articleUrl","location","href","quote","shareBtns","FacebookShareButton","url","hashtag","FacebookIcon","TwitterShareButton","hashtags","TwitterIcon","RedditShareButton","RedditIcon","Button","styledAs","copyLinkBtn","e","a","navigator","clipboard","writeText","btn","target","innerHTML","classList","add","clicked","setTimeout","remove","TableOfContents","sectionHeaders","length","tableOfContents","map","level","text","style","marginLeft","TagViews","PageViewType","tags","tagView","tag","ArticleComponent","article","inRecycling","history","useHistory","dispatch","useAppDispatch","isAdmin","useAppSelector","selectLoginType","LoginType","Admin","name","content","dateCreated","dateModified","migrationTitleName","updateMigrationTitleName","Reading","lastViewType","updateLastViewType","viewType","updateViewType","processedMarkdown","preprocessMarkdown","toggleView","standardAdminControls","Editting","Migration","recyclingAdminControls","confirm","restoreArticle","push","validPageLink","id","articleControls","deleteBtn","deleteArticle","format","headers","MarkdownRender","processed","currentArticle","Input","label","changeHandler","value","defaultValue","console","log","alert","migrateArticle","newName","payload"],"mappings":"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","file":"static/js/6.0cf3024d.chunk.js","sourcesContent":["import styles from \"./Collapsible.module.scss\";\r\nimport { useState } from \"react\";\r\nimport cn from \"classnames\";\r\n\r\nfunction Collapsible({\r\n  header,\r\n  centered = false,\r\n  collapsed = false,\r\n  children,\r\n  className,\r\n  ...props\r\n}: {\r\n  header: string | React.ReactNode;\r\n  collapsed?: boolean;\r\n  centered?: boolean;\r\n  children: React.ReactNode;\r\n} & React.HTMLAttributes<HTMLDivElement>\r\n) {\r\n  const [isCollapsed, setIsCollapsed] = useState(collapsed);\r\n\r\n  return (\r\n    <div\r\n      className={cn(styles.collapsibleContainer, className)}\r\n      {...props}\r\n    >\r\n      <div\r\n        className={cn(styles.collapsibleTitle, {\r\n          [styles.centered]: centered\r\n        })}\r\n        onClick={() =>\r\n          setIsCollapsed((isCollapsed) => !isCollapsed)\r\n        }\r\n      >\r\n        <p>{header}</p>\r\n        <div\r\n          className={cn(\"material-icons\", {\r\n            [styles.collapsed]: isCollapsed\r\n          })}\r\n        >\r\n          expand_more\r\n        </div>\r\n      </div>\r\n\r\n      {(!isCollapsed) && children}\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default Collapsible;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"collapsibleContainer\":\"Collapsible_collapsibleContainer__1frp_\",\"collapsibleTitle\":\"Collapsible_collapsibleTitle__2U45i\",\"collapsed\":\"Collapsible_collapsed__3OQ9_\",\"centered\":\"Collapsible_centered__2bh--\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"shareBtns\":\"MediaShareBtns_shareBtns__3oS4c\",\"copyLinkBtn\":\"MediaShareBtns_copyLinkBtn__3jn0n\",\"clicked\":\"MediaShareBtns_clicked__Mjj1S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableOfContents\":\"TableOfContents_tableOfContents__NsRqp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tagView\":\"TagViews_tagView__32mEr\"};","import styles from \"./MediaShareBtns.module.scss\";\r\n\r\nimport {\r\n  FacebookShareButton,\r\n  FacebookIcon,\r\n  TwitterShareButton,\r\n  TwitterIcon,\r\n  RedditShareButton,\r\n  RedditIcon,\r\n} from \"react-share\";\r\nimport Button from \"components/UI/Button\";\r\n\r\n\r\nfunction MediaShareBtns({\r\n  title,\r\n}: {\r\n  title: string;\r\n}) {\r\n  const articleUrl = location.href;\r\n  const quote = `Give this article a read - ${title}`;\r\n  // this is someone else's job...\r\n  const hashtags = [\"projectenv\", \"climatechange\", \"environment\", \"recycling\"];\r\n\r\n  return (\r\n    <div className={styles.shareBtns}>\r\n      {/* WARN: facebook share is broken, could be my account */}\r\n      < FacebookShareButton\r\n        url={articleUrl}\r\n        quote={quote}\r\n        hashtag=\"#projectenv\"\r\n      >\r\n        <FacebookIcon />\r\n      </FacebookShareButton>\r\n      <TwitterShareButton\r\n        url={articleUrl}\r\n        title={quote}\r\n        hashtags={hashtags}\r\n      >\r\n        <TwitterIcon />\r\n      </TwitterShareButton>\r\n      <RedditShareButton\r\n        url={articleUrl}\r\n        title={quote}\r\n      >\r\n        <RedditIcon />\r\n      </RedditShareButton>\r\n      <Button\r\n        styledAs='oval'\r\n        className={styles.copyLinkBtn + \" material-icons\"}\r\n        onClick={async (e) => {\r\n          await navigator.clipboard.writeText(articleUrl);\r\n          const btn = e.target as HTMLButtonElement;\r\n\r\n          btn.innerHTML = \"done\";\r\n          btn.classList.add(styles.clicked);\r\n\r\n          setTimeout(() => {\r\n            btn.innerHTML = \"link\";\r\n            btn.classList.remove(styles.clicked);\r\n          }, 2000);\r\n        }}\r\n      >\r\n        link\r\n      </Button>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default MediaShareBtns;","import styles from \"./TableOfContents.module.scss\";\r\nimport { HeaderInformation } from \"utils/preprocessMarkdown\";\r\nimport Collapsible from \"components/UI/Collapsible\";\r\n\r\n\r\nfunction TableOfContents({ sectionHeaders }: { sectionHeaders: HeaderInformation[]; }) {\r\n  return (sectionHeaders.length > 0) ? (\r\n    <Collapsible\r\n      className={styles.tableOfContents}\r\n      header=\"Table of Contents\"\r\n      centered={true}\r\n    >\r\n      <nav>\r\n        {\r\n          sectionHeaders.map(({ level, text }) => (\r\n            <a key={text} href={\"#\" + text}>\r\n              <p style={{\r\n                marginLeft: `${(level - 1) * 2}em`\r\n              }}>\r\n                &bull; {text}\r\n              </p>\r\n            </a>\r\n          ))\r\n        }\r\n      </nav>\r\n    </Collapsible>\r\n  ) : null;\r\n}\r\n\r\nexport default TableOfContents;","import styles from \"./TagViews.module.scss\";\r\n\r\n\r\nfunction TagViews({ tags }: { tags?: string[]; }) {\r\n  return (\r\n    <div className={styles.tagView}>\r\n      {\r\n        (tags) ? (\r\n          <>\r\n            <h5>This article was tagged with: </h5>\r\n            {tags.map((tag) => <p key={tag}>{tag}</p>)}\r\n          </>\r\n        ) : (\r\n          <h5>This article has not been tagged.</h5>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TagViews;","import styles from \"components/Article/Article.module.scss\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { format } from \"date-fns\";\r\n\r\nimport { useAppSelector, useAppDispatch } from \"app/hooks\";\r\nimport { migrateArticle, deleteArticle, restoreArticle, Article } from \"app/articlesSlice\";\r\nimport { LoginType, selectLoginType } from \"app/adminSlice\";\r\n\r\nimport { validPageLink } from \"utils/functions\";\r\nimport { preprocessMarkdown } from \"utils/preprocessMarkdown\";\r\n\r\nimport MarkdownRender from \"components/Article/MarkdownRender\";\r\nimport Input from \"components/Form/Input\";\r\nimport Button from \"components/UI/Button\";\r\n\r\nimport Admin from \"pages/Admin/Admin\";\r\nimport MediaShareBtns from \"./MediaShareBtns\";\r\nimport TableOfContents from \"./TableOfContents\";\r\nimport TagViews from \"./TagViews\";\r\n\r\n\r\nenum PageViewType {\r\n  Reading,\r\n  Editting,\r\n  Migration,\r\n}\r\n\r\ninterface ArticleProperties {\r\n  inRecycling: boolean,\r\n  article: Article,\r\n}\r\n\r\nfunction ArticleComponent({ article, inRecycling }: ArticleProperties) {\r\n  const history = useHistory();\r\n  const dispatch = useAppDispatch();\r\n  const currentLoginType = useAppSelector(selectLoginType);\r\n  const isAdmin = currentLoginType === LoginType.Admin;\r\n\r\n  const { name, content, dateCreated, dateModified } = article;\r\n  const [migrationTitleName, updateMigrationTitleName] = useState(name);\r\n\r\n  const [lastViewType, updateLastViewType] = useState(PageViewType.Reading);\r\n  const [viewType, updateViewType] = useState(PageViewType.Reading);\r\n\r\n  const processedMarkdown = preprocessMarkdown(content);\r\n\r\n  function toggleView(target: PageViewType) {\r\n    if (viewType !== target) {\r\n      updateViewType(target);\r\n      updateLastViewType(viewType);\r\n    } else {\r\n      updateViewType(lastViewType);\r\n    }\r\n  }\r\n\r\n  const standardAdminControls = (\r\n    <>\r\n      <Button\r\n        styledAs=\"oval\"\r\n        onClick={() => toggleView(PageViewType.Editting)}\r\n      >\r\n        Edit This Page\r\n      </Button>\r\n      <Button\r\n        onClick={() => toggleView(PageViewType.Migration)}\r\n        styledAs=\"oval\">\r\n        Migrate Page\r\n      </Button>\r\n    </>\r\n  );\r\n\r\n  const recyclingAdminControls = (\r\n    <>\r\n      <Button\r\n        styledAs=\"oval\"\r\n        onClick={async () => {\r\n          if (confirm(\"Do you want to restore this article?\")) {\r\n            await dispatch(restoreArticle(name));\r\n            history.push(validPageLink(name));\r\n          }\r\n        }}\r\n      >\r\n        Restore Article\r\n      </Button>\r\n    </>\r\n  );\r\n\r\n  return <>\r\n    {\r\n      (isAdmin) && (\r\n        <div id={styles.articleControls}>\r\n          {(!inRecycling) ? standardAdminControls : recyclingAdminControls}\r\n          <Button\r\n            id={styles.deleteBtn}\r\n            styledAs=\"oval\"\r\n            onClick={() => {\r\n              if (confirm((inRecycling) ? \"Permenantly delete this article?\" : \"Recycle this article?\")) {\r\n                dispatch(deleteArticle(name));\r\n                history.push(\"/\");\r\n              }\r\n            }}\r\n          >\r\n            Delete Page\r\n          </Button>\r\n        </div>\r\n      )\r\n    }\r\n    {(() => {\r\n      switch (viewType) {\r\n      case PageViewType.Reading:\r\n        return (\r\n          <>\r\n            <h1 className={styles.title}> {name} </h1>\r\n            <div className=\"dateView\">\r\n              <p>\r\n                <b>Date Created: </b>\r\n                {format(dateCreated, \"LLLL d, yyyy, h:mm a\")}\r\n              </p>\r\n              {(dateModified) && (\r\n                <p>\r\n                  <b>Last Modified: </b>\r\n                  {format(dateModified, \"LLLL d, yyyy, h:mm a\")}\r\n                </p>\r\n              )}\r\n            </div>\r\n            <MediaShareBtns title={name} />\r\n            <TableOfContents sectionHeaders={processedMarkdown.headers} />\r\n            <MarkdownRender className={styles.article}>\r\n              {processedMarkdown.processed}\r\n            </MarkdownRender>\r\n            <TagViews tags={article.tags} />\r\n          </>\r\n        );\r\n\r\n      case PageViewType.Editting:\r\n        return isAdmin && <Admin currentArticle={article} />;\r\n\r\n      case PageViewType.Migration:\r\n        return (\r\n          <>\r\n            <h1>Page Migration</h1>\r\n            <Input\r\n              label=\"Migration Title\"\r\n              changeHandler={(e) => updateMigrationTitleName(e.target.value)}\r\n              defaultValue={migrationTitleName}\r\n              value={migrationTitleName} />\r\n            <Button onClick={async () => {\r\n              console.log(migrationTitleName, name);\r\n              if (migrationTitleName === name) {\r\n                alert(\"You cannot migrate a page unto itself!\");\r\n              } else {\r\n                const dispatchResult = await dispatch(migrateArticle({\r\n                  name,\r\n                  newName: migrationTitleName\r\n                }));\r\n                if (dispatchResult.payload) {\r\n                  history.push(validPageLink(migrationTitleName));\r\n                }\r\n              }\r\n            }}>\r\n                Migrate Page\r\n            </Button>\r\n          </>\r\n        );\r\n      }\r\n    })()}\r\n  </>;\r\n}\r\n\r\nexport default ArticleComponent;\r\n"],"sourceRoot":""}