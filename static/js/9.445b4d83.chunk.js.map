{"version":3,"sources":["components/UI/Collapsible.tsx","components/UI/Collapsible.module.scss","components/Article/Article.tsx"],"names":["Collapsible","header","centered","collapsed","children","props","useState","isCollapsed","setIsCollapsed","className","styles","collapsibleContainer","collapsibleTitle","onClick","module","exports","PageViewType","TableOfContents","sectionHeaders","length","style","marginLeft","map","level","text","href","TagViews","tags","id","tag_view","tag","ArticleComponent","article","inRecycling","history","useHistory","dispatch","useAppDispatch","isAdmin","useAppSelector","selectLoginType","LoginType","Admin","name","content","migrationTitleName","updateMigrationTitleName","Reading","lastViewType","updateLastViewType","viewType","updateViewType","processedMarkdown","preprocessMarkdown","toggleView","target","standardAdminControls","styledAs","Editting","Migration","recyclingAdminControls","a","confirm","restoreArticle","push","validPageLink","articleControls","deleteBtn","deleteArticle","title","headers","processed","currentArticle","label","changeHandler","e","value","defaultValue","console","log","alert","migrateArticle","newName","payload"],"mappings":"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","file":"static/js/9.445b4d83.chunk.js","sourcesContent":["import styles from \"./Collapsible.module.scss\";\nimport React, { useState } from \"react\";\n\nfunction Collapsible({\n  header,\n  centered = false,\n  collapsed = false,\n  children,\n  ...props\n}: {\n  header: string | React.ReactNode;\n  collapsed?: boolean;\n  centered?: boolean;\n  children: React.ReactNode;\n} & React.HTMLAttributes<HTMLDivElement>\n) {\n  const [isCollapsed, setIsCollapsed] = useState(collapsed);\n\n  return (\n    <div className={styles.collapsibleContainer} {...props}>\n      <div\n        className={styles.collapsibleTitle + \" \" + (centered && styles.centered) || \"\"}\n        onClick={() =>\n          setIsCollapsed((isCollapsed) => !isCollapsed)\n        }\n      >\n        <p>{header}</p>\n        <div className={`material-icons + ${isCollapsed ? styles.collapsed : \"\"}`}>\n          expand_more\n        </div>\n      </div>\n\n      {(!isCollapsed) && children}\n    </div>\n  );\n}\n\nexport default Collapsible;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"collapsibleContainer\":\"Collapsible_collapsibleContainer__1frp_\",\"collapsibleTitle\":\"Collapsible_collapsibleTitle__2U45i\",\"collapsed\":\"Collapsible_collapsed__3OQ9_\",\"centered\":\"Collapsible_centered__2bh--\"};","import styles from \"components/Article/Article.module.scss\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { useAppSelector, useAppDispatch } from \"app/hooks\";\nimport { migrateArticle, deleteArticle, restoreArticle, Article } from \"app/articlesSlice\";\nimport { LoginType, selectLoginType } from \"app/adminSlice\";\n\nimport { validPageLink } from \"utils/functions\";\nimport { preprocessMarkdown, HeaderInformation } from \"utils/preprocessMarkdown\";\n\nimport MarkdownRender from \"components/Article/MarkdownRender\";\nimport Collapsible from \"components/UI/Collapsible\";\n\nimport Input from \"components/Form/Input\";\nimport Button from \"components/UI/Button\";\n\nimport Admin from \"pages/Admin/Admin\";\n\nfunction TableOfContents({ sectionHeaders }: { sectionHeaders: HeaderInformation[]; }) {\n  return (sectionHeaders.length > 0) ? (\n    <Collapsible header='Table of Contents' centered={true}>\n      <nav style={{ marginLeft: \"3em\", }}>\n        {\n          sectionHeaders.map(({ level, text }) => (\n            <a key={text} href={\"#\" + text}>\n              <p style={{\n                marginLeft: `${(level - 1) * 2}em`\n              }}>\n                        &bull; {text}\n              </p>\n            </a>\n          ))\n        }\n      </nav>\n    </Collapsible>\n  ) : null;\n}\n\nfunction TagViews({ tags }: { tags?: string[]; }) {\n  return (\n    <div id={styles.tag_view}>\n      {\n        (tags) ? (\n          <>\n            <h5>This article was tagged with: </h5>\n            {tags.map((tag) => <p key={tag}>{tag}</p>)}\n          </>\n        ) : (\n          <h5>This article has not been tagged.</h5>\n        )\n      }\n    </div>\n  );\n}\n\nenum PageViewType {\n    Reading,\n    Editting,\n    Migration,\n}\n\ninterface ArticleProperties {\n    inRecycling: boolean,\n    article: Article,\n}\n\nfunction ArticleComponent({article, inRecycling}: ArticleProperties) {\n  const history = useHistory();\n  const dispatch = useAppDispatch();\n  const currentLoginType = useAppSelector(selectLoginType);\n  const isAdmin = currentLoginType === LoginType.Admin;\n\n  const { name, content } = article;\n  const [migrationTitleName, updateMigrationTitleName] = useState(name);\n\n  const [lastViewType, updateLastViewType] = useState(PageViewType.Reading);\n  const [viewType, updateViewType] = useState(PageViewType.Reading);\n\n  const processedMarkdown = preprocessMarkdown(content);\n\n  function toggleView(target: PageViewType) {\n    if (viewType !== target) {\n      updateViewType(target);\n      updateLastViewType(viewType);\n    } else {\n      updateViewType(lastViewType);\n    }\n  }\n\n  const standardAdminControls = (\n    <>\n      <Button\n        styledAs=\"oval\"\n        onClick={() => toggleView(PageViewType.Editting)}\n      >\n            Edit This Page\n      </Button>\n      <Button\n        onClick={() => toggleView(PageViewType.Migration)}\n        styledAs=\"oval\">\n            Migrate Page\n      </Button>\n    </>\n  );\n\n  const recyclingAdminControls = (\n    <>\n      <Button\n        styledAs=\"oval\"\n        onClick={async () => {\n          if (confirm(\"Do you want to restore this article?\")) {\n            await dispatch(restoreArticle(name));\n            history.push(validPageLink(name));\n          }\n        }}\n      >\n            Restore Article\n      </Button>\n    </>\n  );\n\n  return (\n    <>\n      {\n        (isAdmin) && (\n          <div id={styles.articleControls}>\n            {(!inRecycling) ? standardAdminControls : recyclingAdminControls}\n            <Button\n              id={styles.deleteBtn}\n              styledAs=\"oval\"\n              onClick={() => {\n                if (confirm((inRecycling) ? \"Permenantly delete this article?\" : \"Recycle this article?\")) {\n                  dispatch(deleteArticle(name));\n                  history.push(\"/\");\n                }\n              }}\n            >\n              Delete Page\n            </Button>\n          </div>\n        )\n      }\n      {\n        function() {\n          switch (viewType) {\n          case PageViewType.Reading:\n            return (\n              <>\n                <h1 className={styles.title}> {name} </h1>\n                <TableOfContents sectionHeaders={processedMarkdown.headers} />\n                <MarkdownRender className={styles.article}>\n                  {processedMarkdown.processed}\n                </MarkdownRender>\n                <TagViews tags={article.tags} />\n              </>\n            );\n          case PageViewType.Editting:\n            return isAdmin && <Admin currentArticle={article}/>;\n          case PageViewType.Migration:\n            return (\n              <>\n                <h1>Page Migration</h1>\n                <Input\n                  label=\"Migration Title\"\n                  changeHandler={(e) => updateMigrationTitleName(e.target.value)}\n                  defaultValue={migrationTitleName}\n                  value={migrationTitleName} />\n                <Button\n                  onClick={\n                    async function () {\n                      console.log(migrationTitleName, name);\n                      if (migrationTitleName === name) {\n                        alert(\"You cannot migrate a page unto itself!\");\n                      } else {\n                        const dispatchResult = await dispatch(migrateArticle({name, newName: migrationTitleName}));\n                        if (dispatchResult.payload) {\n                          history.push(validPageLink(migrationTitleName));\n                        }\n                      }\n                    }\n                  }>Migrate Page</Button>\n              </>\n            );\n          }\n        }()\n      }\n    </>\n  );\n}\n\nexport default ArticleComponent;\n"],"sourceRoot":""}