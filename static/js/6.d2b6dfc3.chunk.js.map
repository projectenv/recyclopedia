{"version":3,"sources":["components/UI/Collapsible.tsx","components/UI/Collapsible.module.scss","pages/Index/IndexPage.module.scss","components/UI/CheckboxButton.module.scss","components/UI/CheckboxButton.tsx","pages/Index/IndexPage.tsx"],"names":["Collapsible","header","centered","collapsed","children","className","props","useState","isCollapsed","setIsCollapsed","styles","collapsibleContainer","collapsibleTitle","onClick","module","exports","CheckedBoxButton","styledAs","checked","onCheck","button","type","value","onChange","event","target","htmlFor","IndexFilter","filterSettings","updateFilters","id","tagList","tagFilters","map","filterName","active","CheckboxButton","updateTagFilter","IndexPage","articlesData","useAppSelector","selectArticlesData","allTags","selectAllTags","draftStatus","updateFilterSettings","useEffect","tag","isAdmin","selectLoginType","LoginType","Admin","index","v","dictionaryUpdateKey","filterArray","filter","articleLinks","articles","tags","result","tagFilter","name","to","validPageLink"],"mappings":"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","file":"static/js/6.d2b6dfc3.chunk.js","sourcesContent":["import styles from \"./Collapsible.module.scss\";\r\nimport React, { useState } from \"react\";\r\n\r\nfunction Collapsible({\r\n  header,\r\n  centered = false,\r\n  collapsed = false,\r\n  children,\r\n  className,\r\n  ...props\r\n}: {\r\n  header: string | React.ReactNode;\r\n  collapsed?: boolean;\r\n  centered?: boolean;\r\n  children: React.ReactNode;\r\n} & React.HTMLAttributes<HTMLDivElement>\r\n) {\r\n  const [isCollapsed, setIsCollapsed] = useState(collapsed);\r\n\r\n\r\n  return (\r\n    <div\r\n      className={`${styles.collapsibleContainer} ${className || \"\"}`}\r\n      {...props}\r\n    >\r\n      <div\r\n        className={styles.collapsibleTitle + \" \" + (centered && styles.centered) || \"\"}\r\n        onClick={() =>\r\n          setIsCollapsed((isCollapsed) => !isCollapsed)\r\n        }\r\n      >\r\n        <p>{header}</p>\r\n        <div className={`material-icons + ${isCollapsed ? styles.collapsed : \"\"}`}>\r\n          expand_more\r\n        </div>\r\n      </div>\r\n\r\n      {(!isCollapsed) && children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Collapsible;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"collapsibleContainer\":\"Collapsible_collapsibleContainer__1frp_\",\"collapsibleTitle\":\"Collapsible_collapsibleTitle__2U45i\",\"collapsed\":\"Collapsible_collapsed__3OQ9_\",\"centered\":\"Collapsible_centered__2bh--\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"index\":\"IndexPage_index__1U2jv\",\"tagList\":\"IndexPage_tagList__2Z_2Z\",\"articleLinks\":\"IndexPage_articleLinks__2CeNU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"CheckboxButton_button__3sGm8\"};","import styles from \"./CheckboxButton.module.scss\";\r\n\r\nfunction CheckedBoxButton({\r\n  children,\r\n  styledAs,\r\n  checked,\r\n  onCheck,\r\n  className,\r\n  ...props\r\n}: {\r\n  checked?: boolean;\r\n  onCheck?: (checked: boolean) => void,\r\n  children: string;\r\n  styledAs?: \"oval\";\r\n} & React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLDivElement>, HTMLDivElement>\r\n) {\r\n  return (\r\n    <div\r\n      className={`\r\n        ${styles.button} \r\n        ${styledAs ? styles[styledAs] : \"\"} \r\n        ${className || \"\"}\r\n      `}\r\n      {...props}\r\n    >\r\n      <input type=\"checkbox\"\r\n        value={children}\r\n        checked={checked}\r\n        onChange={(event) =>\r\n          onCheck?.(event.target.checked)\r\n        }\r\n      />\r\n      <label htmlFor={children}>{children}</label>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default CheckedBoxButton;\r\n","import styles from \"pages/Index/IndexPage.module.scss\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nimport { useAppSelector } from \"app/hooks\";\r\nimport { selectArticlesData, selectAllTags } from \"app/articlesSlice\";\r\nimport { LoginType, selectLoginType } from \"app/adminSlice\";\r\n\r\nimport { validPageLink, dictionaryUpdateKey } from \"utils/functions\";\r\n\r\nimport Collapsible from \"components/UI/Collapsible\";\r\nimport CheckboxButton from \"components/UI/CheckboxButton\";\r\n\r\ninterface TagFilter {\r\n  filterName: string;\r\n  active: boolean;\r\n}\r\n\r\ninterface FilterSettings {\r\n  draftStatus: boolean;\r\n  tagFilters: TagFilter[];\r\n}\r\n\r\ninterface IndexFilterProperties {\r\n  filterSettings: FilterSettings;\r\n  updateFilters: {\r\n    updateTagFilter: (id: string, newValue: boolean) => void,\r\n  };\r\n}\r\n\r\nfunction IndexFilter({ filterSettings, updateFilters }: IndexFilterProperties) {\r\n  return (\r\n    <Collapsible header='Tags'>\r\n      <div id={styles.tagList}>\r\n        {\r\n          filterSettings.tagFilters.map(({ filterName, active }) =>\r\n            <CheckboxButton\r\n              key={filterName}\r\n              checked={active}\r\n              onCheck={(checked) =>\r\n                updateFilters.updateTagFilter(filterName, checked)\r\n              }\r\n            >\r\n              {filterName}\r\n            </CheckboxButton>\r\n          )\r\n        }\r\n      </div>\r\n    </Collapsible>\r\n  );\r\n}\r\n\r\nfunction IndexPage() {\r\n  const articlesData = useAppSelector(selectArticlesData);\r\n  const allTags = useAppSelector(selectAllTags);\r\n  const [filterSettings, updateFilterSettings] = useState({ draftStatus: false, tagFilters: [] as TagFilter[] });\r\n\r\n  useEffect(\r\n    function () {\r\n      updateFilterSettings(\r\n        {\r\n          draftStatus: false,\r\n          tagFilters: allTags.map((tag) => { return { filterName: tag, active: false }; })\r\n        }\r\n      );\r\n    },\r\n    [allTags]);\r\n\r\n  const currentLoginType = useAppSelector(selectLoginType);\r\n  const isAdmin = currentLoginType === LoginType.Admin;\r\n\r\n  return (\r\n    <div className={styles.index}>\r\n      <h2>Index Page</h2>\r\n      <IndexFilter\r\n        filterSettings={filterSettings}\r\n        updateFilters={\r\n          {\r\n            updateTagFilter: function (id: string, v: boolean) {\r\n              updateFilterSettings(\r\n                dictionaryUpdateKey(\r\n                  filterSettings,\r\n                  [\"tagFilters\"],\r\n                  function (filterArray) {\r\n                    for (const filter of filterArray as TagFilter[]) {\r\n                      if (filter.filterName === id) {\r\n                        filter.active = v;\r\n                        break;\r\n                      }\r\n                    }\r\n                    return filterArray;\r\n                  }\r\n                ) as FilterSettings\r\n              );\r\n            }\r\n          }\r\n        }\r\n      />\r\n      <div className={styles.articleLinks}>\r\n        {\r\n          ((isAdmin) ?\r\n            articlesData.articles :\r\n            articlesData.articles.filter(({ draftStatus }) => !draftStatus)).\r\n            filter(function ({ tags }) {\r\n              let result = function () {\r\n                for (const tagFilter of filterSettings.tagFilters) {\r\n                  if (tagFilter.active) return false;\r\n                }\r\n                return true;\r\n              }();\r\n\r\n              if (!result) {\r\n                for (const tagFilter of filterSettings.tagFilters) {\r\n                  if (tags) {\r\n                    for (const tag of tags) {\r\n                      if (tagFilter.filterName === tag) {\r\n                        // babel can't do ||=????\r\n                        result = result || tagFilter.active;\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n\r\n              return result;\r\n            }).\r\n            map(({ name, draftStatus }) => (\r\n              <Link key={name} to={validPageLink(name)}>\r\n                <p >\r\n                  {(draftStatus) ? \"[DRAFT*] \" + name : name}\r\n                </p>\r\n              </Link>\r\n            ))\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default IndexPage;\r\n"],"sourceRoot":""}