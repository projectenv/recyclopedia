{"version":3,"sources":["components/UI/Collapsible.tsx","components/UI/Collapsible.module.scss","pages/Index/IndexPage.module.scss","components/UI/CheckboxButton.module.scss","components/UI/CheckboxButton.tsx","pages/Index/IndexPage.tsx"],"names":["Collapsible","header","centered","collapsed","children","className","props","useState","isCollapsed","setIsCollapsed","cn","styles","collapsibleContainer","collapsibleTitle","onClick","module","exports","CheckedBoxButton","styledAs","checked","onCheck","button","type","value","onChange","event","target","htmlFor","IndexFilter","filterSettings","updateFilters","id","tagList","tagFilters","map","filterName","active","CheckboxButton","updateTagFilter","IndexPage","articlesData","useAppSelector","selectArticlesData","allTags","selectAllTags","draftStatus","updateFilterSettings","useEffect","tag","isAdmin","selectLoginType","LoginType","Admin","index","v","dictionaryUpdateKey","filterArray","filter","articleLinks","articles","tags","result","tagFilter","name","to","validPageLink"],"mappings":"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","file":"static/js/8.ed91faca.chunk.js","sourcesContent":["import styles from \"./Collapsible.module.scss\";\r\nimport { useState } from \"react\";\r\nimport cn from \"classnames\";\r\n\r\nfunction Collapsible({\r\n  header,\r\n  centered = false,\r\n  collapsed = false,\r\n  children,\r\n  className,\r\n  ...props\r\n}: {\r\n  header: string | React.ReactNode;\r\n  collapsed?: boolean;\r\n  centered?: boolean;\r\n  children: React.ReactNode;\r\n} & React.HTMLAttributes<HTMLDivElement>\r\n) {\r\n  const [isCollapsed, setIsCollapsed] = useState(collapsed);\r\n\r\n  return (\r\n    <div\r\n      className={cn(styles.collapsibleContainer, className)}\r\n      {...props}\r\n    >\r\n      <div\r\n        className={cn(styles.collapsibleTitle, {\r\n          [styles.centered]: centered\r\n        })}\r\n        onClick={() =>\r\n          setIsCollapsed((isCollapsed) => !isCollapsed)\r\n        }\r\n      >\r\n        <p>{header}</p>\r\n        <div\r\n          className={cn(\"material-icons\", {\r\n            [styles.collapsed]: isCollapsed\r\n          })}\r\n        >\r\n          expand_more\r\n        </div>\r\n      </div>\r\n\r\n      {(!isCollapsed) && children}\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default Collapsible;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"collapsibleContainer\":\"Collapsible_collapsibleContainer__1frp_\",\"collapsibleTitle\":\"Collapsible_collapsibleTitle__2U45i\",\"collapsed\":\"Collapsible_collapsed__3OQ9_\",\"centered\":\"Collapsible_centered__2bh--\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"index\":\"IndexPage_index__1U2jv\",\"tagList\":\"IndexPage_tagList__2Z_2Z\",\"articleLinks\":\"IndexPage_articleLinks__2CeNU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"CheckboxButton_button__3sGm8\"};","import styles from \"./CheckboxButton.module.scss\";\r\nimport cn from \"classnames\";\r\n\r\n\r\nfunction CheckedBoxButton({\r\n  children,\r\n  styledAs,\r\n  checked,\r\n  onCheck,\r\n  className,\r\n  ...props\r\n}: {\r\n  checked?: boolean;\r\n  onCheck?: (checked: boolean) => void,\r\n  children: string;\r\n  styledAs?: \"oval\";\r\n} & React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLDivElement>, HTMLDivElement>\r\n) {\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        styles.button,\r\n        styledAs ? styles[styledAs] : \"\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      <input type=\"checkbox\"\r\n        value={children}\r\n        checked={checked}\r\n        onChange={(event) =>\r\n          onCheck?.(event.target.checked)\r\n        }\r\n      />\r\n      <label htmlFor={children}>{children}</label>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default CheckedBoxButton;\r\n","import styles from \"pages/Index/IndexPage.module.scss\";\nimport { Link } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\n\nimport { useAppSelector } from \"app/hooks\";\nimport { selectArticlesData, selectAllTags } from \"app/articlesSlice\";\nimport { LoginType, selectLoginType } from \"app/adminSlice\";\n\nimport { validPageLink, dictionaryUpdateKey } from \"utils/functions\";\n\nimport Collapsible from \"components/UI/Collapsible\";\nimport CheckboxButton from \"components/UI/CheckboxButton\";\n\ninterface TagFilter {\n  filterName: string;\n  active: boolean;\n}\n\ninterface FilterSettings {\n  draftStatus: boolean;\n  tagFilters: TagFilter[];\n}\n\ninterface IndexFilterProperties {\n  filterSettings: FilterSettings;\n  updateFilters: {\n    updateTagFilter: (id: string, newValue: boolean) => void,\n  };\n}\n\nfunction IndexFilter({ filterSettings, updateFilters }: IndexFilterProperties) {\n  return (\n    <Collapsible header='Tags'>\n      <div id={styles.tagList}>\n        {\n          filterSettings.tagFilters.map(({ filterName, active }) =>\n            <CheckboxButton\n              key={filterName}\n              checked={active}\n              onCheck={(checked) =>\n                updateFilters.updateTagFilter(filterName, checked)\n              }\n            >\n              {filterName}\n            </CheckboxButton>\n          )\n        }\n      </div>\n    </Collapsible>\n  );\n}\n\nfunction IndexPage() {\n  const articlesData = useAppSelector(selectArticlesData);\n  const allTags = useAppSelector(selectAllTags);\n  const [filterSettings, updateFilterSettings] = useState({ draftStatus: false, tagFilters: [] as TagFilter[] });\n\n  useEffect(\n    function () {\n      updateFilterSettings(\n        {\n          draftStatus: false,\n          tagFilters: allTags.map((tag) => { return { filterName: tag, active: false }; })\n        }\n      );\n    },\n    [allTags]);\n\n  const currentLoginType = useAppSelector(selectLoginType);\n  const isAdmin = currentLoginType === LoginType.Admin;\n\n  return (\n    <div className={styles.index}>\n      <h2>Index Page</h2>\n      <IndexFilter\n        filterSettings={filterSettings}\n        updateFilters={\n          {\n            updateTagFilter: function (id: string, v: boolean) {\n              updateFilterSettings(\n                dictionaryUpdateKey(\n                  filterSettings,\n                  [\"tagFilters\"],\n                  function (filterArray) {\n                    for (const filter of filterArray as TagFilter[]) {\n                      if (filter.filterName === id) {\n                        filter.active = v;\n                        break;\n                      }\n                    }\n                    return filterArray;\n                  }\n                ) as FilterSettings\n              );\n            }\n          }\n        }\n      />\n      <div className={styles.articleLinks}>\n        {\n          ((isAdmin) ?\n            articlesData.articles :\n            articlesData.articles.filter(({ draftStatus }) => !draftStatus)).\n            filter(function ({ tags }) {\n              let result = function () {\n                for (const tagFilter of filterSettings.tagFilters) {\n                  if (tagFilter.active) return false;\n                }\n                return true;\n              }();\n\n              if (!result) {\n                for (const tagFilter of filterSettings.tagFilters) {\n                  if (tags) {\n                    for (const tag of tags) {\n                      if (tagFilter.filterName === tag) {\n                        // babel can't do ||=????\n                        result = result || tagFilter.active;\n                      }\n                    }\n                  }\n                }\n              }\n\n              return result;\n            }).\n            map(({ name, draftStatus }) => (\n              <Link key={name} to={validPageLink(name)}>\n                <p >\n                  {(draftStatus) ? \"[DRAFT*] \" + name : name}\n                </p>\n              </Link>\n            ))\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default IndexPage;\n"],"sourceRoot":""}