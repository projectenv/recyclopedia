{"version":3,"sources":["components/UI/Button.tsx","components/UI/Button.module.scss","components/Form/Input.tsx","components/Form/Input.module.scss","components/Form/Form.tsx","pages/Admin/Register.tsx"],"names":["Button","children","type","styledAs","props","className","styles","button","default","module","exports","Input","changeHandler","label","value","option","readOnly","selectAllOnFocus","InputOrTextarea","inputRef","useRef","group","ref","textarea","input","onChange","onFocus","current","select","shrink","Form","submitFn","inputItems","defaultItems","Object","assign","entries","map","name","defaultValue","useState","setInput","e","target","submitHandler","a","preventDefault","form","onSubmit","idx","Register","_","useAppDispatch","useHistory","email","placeholder","required","password","passwordConfirmation","registerAccount","alert"],"mappings":"kJA2BeA,IAzBf,YASG,IARDC,EAQA,EARAA,SAQA,IAPAC,YAOA,MAPO,SAOP,EANAC,EAMA,EANAA,SACGC,EAKH,8CACA,OACE,gDACEC,UAAS,oBACLC,IAAOC,OADF,sBAELJ,EAAWG,IAAOH,GAAYG,IAAOE,QAFhC,sBAGLJ,EAAMC,WAAa,GAHd,YAKTH,KAAMA,GACFE,GAPN,aASGH,O,oBCrBPQ,EAAOC,QAAU,CAAC,OAAS,uBAAuB,QAAU,wBAAwB,KAAO,uB,oFCqE5EC,IArDD,SAAC,GAcT,IAbJC,EAaG,EAbHA,cACAC,EAYG,EAZHA,MACAC,EAWG,EAXHA,MACAC,EAUG,EAVHA,OACAC,EASG,EATHA,SACAC,EAQG,EARHA,iBACGb,EAOA,wFACGc,EAAkBH,GAAU,QAC5BI,EAAWC,iBAA+C,MAEhE,OACE,sBAAKf,UAAWC,IAAOe,MAAvB,UACE,cAACH,EAAD,qCACEI,IAAKH,EACLd,UACa,aAAXU,EACET,IAAOiB,SACPjB,IAAOkB,MAEXC,SAAUb,GAERK,GACG,CACHS,QAAS,kCAAMP,EAASQ,eAAf,aAAM,EAAkBC,YAGjCZ,GACG,CACHA,UAAU,IAERZ,IAGJS,GACE,uBACER,UAAS,UAAKS,EAAQR,IAAOuB,OAAS,IADxC,SAGGhB,S,oBC7DbJ,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,mBAAmB,gCAAgC,OAAS,wB,oICkE5FoB,IA9Df,YAYG,IATDC,EASA,EATAA,SACAC,EAQA,EARAA,WACA/B,EAOA,EAPAA,SACGG,EAMH,oDAEM6B,EAAeC,OAAOC,OAC1BD,OAAOE,QAAQJ,GAAYK,KAAI,mCAAEC,EAAF,KAAQxB,EAAR,2BAC5BwB,EAAOxB,EAAMyB,cAAgB,QAJlC,EAQ0BC,mBAASP,GARnC,mBAQOT,EARP,KAQciB,EARd,KAUM7B,EAA+B,SAAC8B,GAAO,IAAD,EAClBA,EAAEC,OAAlBL,EADkC,EAClCA,KAAMxB,EAD4B,EAC5BA,MAEd2B,EAAS,2BACJjB,GADG,kBAELc,EAAOxB,MAIN8B,EAAa,uCAAG,WAAOF,GAAP,SAAAG,EAAA,yDACpBH,EAAEI,kBAEYf,EAHM,gCAIVA,EAASP,GAJC,+CAKhB,EALgB,aAOXiB,EAASR,GAPE,4CAAH,sDAUnB,OACE,uBACE5B,UAAS,UAAKC,IAAOyC,KAAZ,YAAoB3C,EAAMC,WAAa,IAChD2C,SAAUJ,EAFZ,UAKIV,OAAOE,QAAQJ,GAAYK,KAAI,WAAgBY,GAAhB,uBAAEX,EAAF,KAAQxB,EAAR,YAC7B,cAAC,IAAD,aAEEF,cAAeA,EACf0B,KAAMA,EACNxB,MAAOU,EAAMc,IACTxB,GAJCmC,MAQVhD,O,yICbQiD,UAvCf,SAAkBC,GAIhB,OAHiBC,cACDC,cAGd,qCACE,wDACA,cAAC,IAAD,CACErB,WAAY,CACVsB,MAAO,CACLrC,kBAAkB,EAClBsC,YAAa,QACbC,UAAU,GAEZC,SAAU,CACRxC,kBAAkB,EAClBsC,YAAa,WACbC,UAAU,GAEZE,qBAAsB,CACpBzC,kBAAkB,EAClBsC,YAAa,mBACbC,UAAU,IAGdzB,SAAQ,uCAAE,WAAOP,GAAP,SAAAqB,EAAA,yDACJrB,EAAMiC,WAAajC,EAAMkC,qBADrB,gCAEAC,YAAgB,CAAEL,MAAO9B,EAAM8B,MAAOG,SAAUjC,EAAMiC,WAFtD,6BAING,MAAM,2BAJA,2CAAF,sDAlBV,SA0BE,cAAC,IAAD,CAAQ1D,KAAK,SAAb","file":"static/js/6.cc9ca997.chunk.js","sourcesContent":["import styles from \"./Button.module.scss\";\n\nfunction Button({\n  children,\n  type = \"button\",\n  styledAs,\n  ...props\n}: {\n  children: string;\n  styledAs?: \"oval\";\n} & React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\n) {\n  return (\n    <button\n      className={`\n        ${styles.button} \n        ${styledAs ? styles[styledAs] : styles.default} \n        ${props.className || \"\"}\n      `}\n      type={type}\n      {...props}\n    >\n      {children}\n    </button>\n  );\n}\n\nexport default Button;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1_sNH\",\"default\":\"Button_default__1hCTa\",\"oval\":\"Button_oval__Z1YBF\"};","import styles from \"components/Form/Input.module.scss\";\nimport { useRef } from \"react\";\n\nexport interface InputOptions {\n  type?: string,\n  placeholder?: string;\n  readOnly?: boolean;\n  required?: boolean;\n\n  option?: \"input\" | \"textarea\";\n  label?: string;\n  defaultValue?: string,\n  selectAllOnFocus?: boolean;\n}\n\nexport type ChangeHandler = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;\n\nconst Input = ({\n  changeHandler,\n  label,\n  value,\n  option,\n  readOnly,\n  selectAllOnFocus,\n  ...props\n}: {\n  changeHandler?: ChangeHandler;\n  name?: string;\n  label?: string;\n  value: string;\n} & InputOptions\n) => {\n  const InputOrTextarea = option || \"input\";\n  const inputRef = useRef<HTMLInputElement & HTMLTextAreaElement>(null);\n\n  return (\n    <div className={styles.group}>\n      <InputOrTextarea\n        ref={inputRef}\n        className={(\n          option === \"textarea\"\n        ) ? styles.textarea\n          : styles.input\n        }\n        onChange={changeHandler}\n        {...((\n          selectAllOnFocus\n        ) && {\n          onFocus: () => inputRef.current?.select()\n        })}\n        {...((\n          readOnly\n        ) && {\n          readOnly: true\n        })}\n        {...props}\n      />\n      {\n        label && (\n          <label\n            className={`${value ? styles.shrink : \"\"}`}\n          >\n            {label}\n          </label>\n        )\n      }\n    </div>\n  );\n};\n\nexport default Input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"group\":\"Input_group___CkTD\",\"form-input-label\":\"Input_form-input-label__3LBb9\",\"shrink\":\"Input_shrink__1Oknc\"};","import styles from \"./Form.module.scss\";\nimport { useState, FormEvent } from \"react\";\n\nimport Input, { InputOptions, ChangeHandler } from \"components/Form/Input\";\n\nfunction Form<\n  T extends { [name: string]: InputOptions; }\n>({\n  submitFn,\n  inputItems,\n  children,\n  ...props\n}: {\n  submitFn?: (inputItems: Record<keyof T, string>) => void | boolean | Promise<boolean | void>;\n  inputItems: T;\n  children?: React.ReactNode;\n} & React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLFormElement>, HTMLFormElement>\n) {\n\n  const defaultItems = Object.assign(\n    Object.entries(inputItems).map(([name, value]) => ({\n      [name]: value.defaultValue || \"\"\n    }))\n  );\n\n  const [input, setInput] = useState(defaultItems);\n\n  const changeHandler: ChangeHandler = (e) => {\n    const { name, value } = e.target;\n\n    setInput({\n      ...input,\n      [name]: value\n    });\n  };\n\n  const submitHandler = async (e: FormEvent) => {\n    e.preventDefault();\n\n    const reset = submitFn\n      ? await submitFn(input)\n      : true;\n\n    reset && setInput(defaultItems);\n  };\n\n  return (\n    <form\n      className={`${styles.form} ${props.className || \"\"}`}\n      onSubmit={submitHandler}\n    >\n      {\n        Object.entries(inputItems).map(([name, value], idx) => (\n          <Input\n            key={idx}\n            changeHandler={changeHandler}\n            name={name}\n            value={input[name]}\n            {...value}\n          />\n        ))\n      }\n      {children}\n    </form>\n  );\n}\n\nexport default Form;\n","import styles from \"pages/Admin/Register.module.scss\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { useAppDispatch } from \"app/hooks\";\nimport { registerAccount } from \"app/adminSlice\";\n\nimport Form from \"components/Form/Form\";\nimport Button from \"components/UI/Button\";\n\n\nfunction Register(_: Record<string, never>) {\n  const dispatch = useAppDispatch();\n  const history = useHistory();\n\n  return (\n    <>\n      <h1>Register a New Account</h1>\n      <Form\n        inputItems={{\n          email: {\n            selectAllOnFocus: true,\n            placeholder: \"Email\",\n            required: true,\n          },\n          password: {\n            selectAllOnFocus: true,\n            placeholder: \"Password\",\n            required: true,\n          },\n          passwordConfirmation: {\n            selectAllOnFocus: true,\n            placeholder: \"Confirm Password\",\n            required: true,\n          }\n        }}\n        submitFn={async (input) => {\n          if (input.password === input.passwordConfirmation) {\n            await registerAccount({ email: input.email, password: input.password });\n          } else {\n            alert(\"Passwords do not match!\");\n          }\n        }}\n      >\n        <Button type='submit'>Register Account</Button>\n      </Form>\n    </>\n  );\n}\n\nexport default Register;"],"sourceRoot":""}