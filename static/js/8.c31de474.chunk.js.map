{"version":3,"sources":["components/UI/CheckboxButton.tsx","components/UI/CheckboxButton.module.scss","components/UI/Collapsible.tsx","components/UI/Collapsible.module.scss","pages/Index/IndexPage.module.scss","pages/Index/IndexPage.tsx"],"names":["CheckedBoxButton","forwardRef","ref","name","styledAs","checked","children","className","props","cn","styles","button","default","type","value","htmlFor","module","exports","Collapsible","header","centered","collapsed","useState","isCollapsed","setIsCollapsed","collapsibleContainer","collapsibleTitle","onClick","IndexFilter","filterSettings","updateFilters","id","tagList","tagFilters","map","filterName","active","onCheck","updateTagFilter","IndexPage","articlesData","useAppSelector","selectArticlesData","allTags","selectAllTags","draftStatus","updateFilterSettings","useEffect","tag","isAdmin","selectLoginType","LoginType","Admin","index","v","dictionaryUpdateKey","filterArray","filter","articleLinks","articles","tags","result","tagFilter","to","validPageLink"],"mappings":"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","file":"static/js/8.c31de474.chunk.js","sourcesContent":["import styles from \"./CheckboxButton.module.scss\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\n\n\ntype CheckboxProps = {\n  name: string;\n  styledAs?: \"oval\" | \"circle\";\n  checked?: boolean;\n  onCheck?: (checked: boolean) => void,\n  children: React.ReactNode;\n} & React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\nconst CheckedBoxButton = forwardRef<HTMLInputElement, CheckboxProps>(\n  function CheckedBoxButton(\n    {\n      name,\n      styledAs,\n      checked,\n      children,\n      className,\n      ...props\n    },\n    ref\n  ) {\n    return (\n      <div\n        className={cn(\n          styles.button,\n          styledAs ? styles[styledAs] : styles.default,\n          className\n        )}\n      >\n        <input\n          ref={ref}\n          type=\"checkbox\"\n          value={name}\n          checked={checked}\n          {...props}\n        />\n        <label htmlFor={name}>{children}</label>\n      </div >\n    );\n  }\n);\n\nexport default CheckedBoxButton;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"CheckboxButton_button__3sGm8\",\"default\":\"CheckboxButton_default__2RAqr\",\"circle\":\"CheckboxButton_circle__1GmiA\"};","import styles from \"./Collapsible.module.scss\";\nimport { useState } from \"react\";\nimport cn from \"classnames\";\n\nfunction Collapsible({\n  header,\n  centered = false,\n  collapsed = false,\n  children,\n  className,\n  ...props\n}: {\n  header: string | React.ReactNode;\n  collapsed?: boolean;\n  centered?: boolean;\n  children: React.ReactNode;\n} & React.HTMLAttributes<HTMLDivElement>\n) {\n  const [isCollapsed, setIsCollapsed] = useState(collapsed);\n\n  return (\n    <div\n      className={cn(styles.collapsibleContainer, className)}\n      {...props}\n    >\n      <div\n        className={cn(styles.collapsibleTitle, {\n          [styles.centered]: centered\n        })}\n        onClick={() =>\n          setIsCollapsed((isCollapsed) => !isCollapsed)\n        }\n      >\n        <p>{header}</p>\n        <div\n          className={cn(\"material-icons\", {\n            [styles.collapsed]: isCollapsed\n          })}\n        >\n          expand_more\n        </div>\n      </div>\n\n      {(!isCollapsed) && children}\n    </div >\n  );\n}\n\nexport default Collapsible;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"collapsibleContainer\":\"Collapsible_collapsibleContainer__1frp_\",\"collapsibleTitle\":\"Collapsible_collapsibleTitle__2U45i\",\"collapsed\":\"Collapsible_collapsed__3OQ9_\",\"centered\":\"Collapsible_centered__2bh--\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"index\":\"IndexPage_index__1U2jv\",\"tagList\":\"IndexPage_tagList__2Z_2Z\",\"articleLinks\":\"IndexPage_articleLinks__2CeNU\"};","import styles from \"pages/Index/IndexPage.module.scss\";\nimport { Link } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\n\nimport { useAppSelector } from \"app/hooks\";\nimport { selectArticlesData, selectAllTags } from \"app/articlesSlice\";\nimport { LoginType, selectLoginType } from \"app/adminSlice\";\n\nimport { validPageLink, dictionaryUpdateKey } from \"utils/functions\";\n\nimport Collapsible from \"components/UI/Collapsible\";\nimport CheckboxButton from \"components/UI/CheckboxButton\";\n\ninterface TagFilter {\n  filterName: string;\n  active: boolean;\n}\n\ninterface FilterSettings {\n  draftStatus: boolean;\n  tagFilters: TagFilter[];\n}\n\ninterface IndexFilterProperties {\n  filterSettings: FilterSettings;\n  updateFilters: {\n    updateTagFilter: (id: string, newValue: boolean) => void,\n  };\n}\n\nfunction IndexFilter({ filterSettings, updateFilters }: IndexFilterProperties) {\n  return (\n    <Collapsible header='Tags'>\n      <div id={styles.tagList}>\n        {\n          filterSettings.tagFilters.map(({ filterName, active }) =>\n            <CheckboxButton\n              key={filterName}\n              name={filterName}\n              checked={active}\n              onCheck={(checked) =>\n                updateFilters.updateTagFilter(filterName, checked)\n              }\n            >\n              {filterName}\n            </CheckboxButton>\n          )\n        }\n      </div>\n    </Collapsible>\n  );\n}\n\nfunction IndexPage() {\n  const articlesData = useAppSelector(selectArticlesData);\n  const allTags = useAppSelector(selectAllTags);\n  const [filterSettings, updateFilterSettings] = useState({ draftStatus: false, tagFilters: [] as TagFilter[] });\n\n  useEffect(\n    function () {\n      updateFilterSettings(\n        {\n          draftStatus: false,\n          tagFilters: allTags.map((tag) => { return { filterName: tag, active: false }; })\n        }\n      );\n    },\n    [allTags]);\n\n  const currentLoginType = useAppSelector(selectLoginType);\n  const isAdmin = currentLoginType === LoginType.Admin;\n\n  return (\n    <div className={styles.index}>\n      <h2>Index Page</h2>\n      <IndexFilter\n        filterSettings={filterSettings}\n        updateFilters={\n          {\n            updateTagFilter: function (id: string, v: boolean) {\n              updateFilterSettings(\n                dictionaryUpdateKey(\n                  filterSettings,\n                  [\"tagFilters\"],\n                  function (filterArray) {\n                    for (const filter of filterArray as TagFilter[]) {\n                      if (filter.filterName === id) {\n                        filter.active = v;\n                        break;\n                      }\n                    }\n                    return filterArray;\n                  }\n                ) as FilterSettings\n              );\n            }\n          }\n        }\n      />\n      <div className={styles.articleLinks}>\n        {\n          ((isAdmin) ?\n            articlesData.articles :\n            articlesData.articles.filter(({ draftStatus }) => !draftStatus)).\n            filter(function ({ tags }) {\n              let result = function () {\n                for (const tagFilter of filterSettings.tagFilters) {\n                  if (tagFilter.active) return false;\n                }\n                return true;\n              }();\n\n              if (!result) {\n                for (const tagFilter of filterSettings.tagFilters) {\n                  if (tags) {\n                    for (const tag of tags) {\n                      if (tagFilter.filterName === tag) {\n                        // babel can't do ||=????\n                        result = result || tagFilter.active;\n                      }\n                    }\n                  }\n                }\n              }\n\n              return result;\n            }).\n            map(({ name, draftStatus }) => (\n              <Link key={name} to={validPageLink(name)}>\n                <p >\n                  {(draftStatus) ? \"[DRAFT*] \" + name : name}\n                </p>\n              </Link>\n            ))\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default IndexPage;\n"],"sourceRoot":""}