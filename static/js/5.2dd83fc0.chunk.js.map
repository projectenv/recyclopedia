{"version":3,"sources":["components/UI/CheckboxButton.tsx","components/Form/Form.tsx","components/UI/CheckboxButton.module.scss","components/UI/Collapsible.tsx","components/UI/Collapsible.module.scss","components/Form/Form.module.scss","components/Article/FloatingSocialMenu.module.scss","components/Comment/Comment.module.scss","components/Article/MediaShareBtns.module.scss","components/UI/CheckboxCounterBtn.module.scss","components/Article/TableOfContents.module.scss","components/Article/TagViews.module.scss","components/Comment/CommentSection.module.scss","components/Comment/Comment.tsx","components/Article/MediaShareBtns.tsx","components/UI/CheckboxCounterBtn.tsx","components/Article/FloatingSocialMenu.tsx","components/Article/TableOfContents.tsx","components/Article/TagViews.tsx","components/Article/Article.tsx","components/Comment/CommentSection.tsx"],"names":["CheckedBoxButton","forwardRef","ref","name","styledAs","checked","onCheck","children","className","onChange","props","cn","styles","button","default","type","value","event","target","htmlFor","Form","submitFn","inputItems","defaultItems","Object","assign","entries","map","defaultValue","useState","input","setInput","changeHandler","e","submitHandler","a","preventDefault","form","onSubmit","inputs","idx","module","exports","Collapsible","header","centered","collapsed","isCollapsed","setIsCollapsed","collapsibleContainer","collapsibleTitle","onClick","currentVoteTypeOfCurrentUser","votes","vote","userId","databaseApi","applicationUser","id","getLikeCountAndDislikeCount","likeCount","reduce","total","dislikeCount","Comment","comment","parentId","user","commenterAvatar","avatar","commenterUserName","voteType","setVoteType","useEffect","commentUser","src","alt","formatDistance","createdAt","Date","commentContent","content","commentControls","CheckboxButton","commentBtn","VoteType","Like","Dislike","TopLevelComment","commentId","MediaShareBtns","title","articleUrl","location","href","quote","shareBtns","FacebookShareButton","url","hashtag","FacebookIcon","TwitterShareButton","hashtags","TwitterIcon","RedditShareButton","RedditIcon","Button","copyLinkBtn","navigator","clipboard","writeText","btn","innerHTML","classList","add","clicked","setTimeout","remove","CheckboxCounterBtn","materialIcon","counter","checkboxCounterBtn","FloatingSocialMenu","commentSectionRef","expandShare","setExpandShare","floatingSocialMenu","commentSection","current","posY","getBoundingClientRect","top","window","pageYOffset","scrollTo","behavior","TableOfContents","sectionHeaders","length","tableOfContents","level","text","style","marginLeft","TagViews","PageViewType","tags","tagView","tag","CommentSection","comments","articleName","refetchComments","loginType","useAppSelector","selectLoginType","LoginType","Anonymous","accountDetails","selectAccountDetails","commentForm","placeholder","option","required","addComment","commentSectionContent","commentVote","ArticleComponent","article","inRecycling","history","useHistory","dispatch","useAppDispatch","currentLoginType","isAdmin","Admin","dateCreated","dateModified","migrationTitleName","updateMigrationTitleName","Reading","lastViewType","updateLastViewType","viewType","updateViewType","processedMarkdown","preprocessMarkdown","useRef","updateComments","commentPinger","_ucp","toggleView","queryForArticles","undefined","getCommentsOfArticle","retrievedComments","standardAdminControls","Editting","Migration","recyclingAdminControls","confirm","restoreArticle","push","validPageLink","articleControls","deleteArticle","articleVote","bannerImage","Banner","dateView","format","headers","MarkdownRender","processed","currentArticle","Input","label","console","log","alert","migrateArticle","newName","payload"],"mappings":"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","file":"static/js/5.2dd83fc0.chunk.js","sourcesContent":["import styles from \"./CheckboxButton.module.scss\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\n\n\ntype CheckboxProps = {\n  name: string;\n  styledAs?: \"oval\" | \"circle\";\n  checked?: boolean;\n  onCheck?: (checked: boolean) => void,\n  children: React.ReactNode;\n} & React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\nconst CheckedBoxButton = forwardRef<HTMLInputElement, CheckboxProps>(\n  function CheckedBoxButton(\n    {\n      name,\n      styledAs,\n      checked,\n      onCheck,\n      children,\n      className,\n      onChange,\n      ...props\n    },\n    ref\n  ) {\n    return (\n      <div\n        className={cn(\n          styles.button,\n          styledAs ? styles[styledAs] : styles.default\n        )}\n      >\n        <input\n          ref={ref}\n          type=\"checkbox\"\n          value={name}\n          checked={checked}\n          onChange={(event) => {\n            onChange?.(event);\n            onCheck?.(event.target.checked);\n          }}\n          {...props}\n        />\n        <label\n          htmlFor={name}\n          className={className}\n        >\n          {children}\n        </label>\n      </div >\n    );\n  }\n);\n\nexport default CheckedBoxButton;\n","import styles from \"./Form.module.scss\";\nimport { useState } from \"react\";\nimport cn from \"classnames\";\n\nimport Input, { InputOptions, ChangeHandler } from \"./Input\";\n\n\nfunction Form<\n  T extends Record<string, InputOptions>\n>({\n  submitFn,\n  inputItems,\n  children,\n  className,\n  ...props\n}: {\n  submitFn?: (inputItems: Record<keyof T, string>) => void | Promise<void>;\n  inputItems: T;\n  children?: React.ReactNode;\n} & React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLFormElement>, HTMLFormElement>\n) {\n\n  const defaultItems = Object.assign(\n    Object.entries(inputItems).map(([name, value]) => ({\n      [name]: value.defaultValue || \"\"\n    }))\n  );\n\n  const [input, setInput] = useState(defaultItems);\n\n  const changeHandler: ChangeHandler = (e) => {\n    const { name, value } = e.target;\n\n    setInput({\n      ...input,\n      [name]: value\n    });\n  };\n\n  const submitHandler = async (e: React.FormEvent) => {\n    e.preventDefault();\n    await submitFn?.(input);\n    setInput(defaultItems);\n  };\n\n  return (\n    <form\n      className={cn(styles.form, className)}\n      onSubmit={submitHandler}\n      {...props}\n    >\n      <div className={styles.inputs}>\n        {\n          Object.entries(inputItems).map(([name, value], idx) => (\n            <Input\n              key={idx}\n              changeHandler={changeHandler}\n              name={name}\n              value={input[name]}\n              {...value}\n            />\n          ))\n        }\n      </div>\n      {children}\n    </ form>\n  );\n}\n\nexport default Form;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"CheckboxButton_button__3sGm8\",\"oval\":\"CheckboxButton_oval__3btE3\",\"circle\":\"CheckboxButton_circle__1GmiA\"};","import styles from \"./Collapsible.module.scss\";\nimport { useState } from \"react\";\nimport cn from \"classnames\";\n\nfunction Collapsible({\n  header,\n  centered = false,\n  collapsed = false,\n  children,\n  className,\n  ...props\n}: {\n  header: string | React.ReactNode;\n  collapsed?: boolean;\n  centered?: boolean;\n  children: React.ReactNode;\n} & React.HTMLAttributes<HTMLDivElement>\n) {\n  const [isCollapsed, setIsCollapsed] = useState(collapsed);\n\n  return (\n    <div\n      className={cn(styles.collapsibleContainer, className)}\n      {...props}\n    >\n      <div\n        className={cn(styles.collapsibleTitle, {\n          [styles.centered]: centered\n        })}\n        onClick={() =>\n          setIsCollapsed((isCollapsed) => !isCollapsed)\n        }\n      >\n        <p>{header}</p>\n        <div\n          className={cn(\"material-icons\", {\n            [styles.collapsed]: isCollapsed\n          })}\n        >\n          expand_more\n        </div>\n      </div>\n\n      {(!isCollapsed) && children}\n    </div >\n  );\n}\n\nexport default Collapsible;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"collapsibleContainer\":\"Collapsible_collapsibleContainer__1frp_\",\"collapsibleTitle\":\"Collapsible_collapsibleTitle__2U45i\",\"collapsed\":\"Collapsible_collapsed__3OQ9_\",\"centered\":\"Collapsible_centered__2bh--\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__201Ui\",\"inputs\":\"Form_inputs__2RGHw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"floatingSocialMenu\":\"FloatingSocialMenu_floatingSocialMenu__3IU2W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comment\":\"Comment_comment__2Wan6\",\"commentUser\":\"Comment_commentUser__19j4V\",\"commentContent\":\"Comment_commentContent__2nMjH\",\"commentControls\":\"Comment_commentControls__hM516\",\"commentBtn\":\"Comment_commentBtn__1L2O-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"shareBtns\":\"MediaShareBtns_shareBtns__3oS4c\",\"copyLinkBtn\":\"MediaShareBtns_copyLinkBtn__3jn0n\",\"clicked\":\"MediaShareBtns_clicked__Mjj1S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkboxCounterBtn\":\"CheckboxCounterBtn_checkboxCounterBtn__zZ3p0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableOfContents\":\"TableOfContents_tableOfContents__NsRqp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tagView\":\"TagViews_tagView__32mEr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"commentSection\":\"CommentSection_commentSection__3DSu0\",\"commentForm\":\"CommentSection_commentForm__3w5Gv\",\"commentSectionContent\":\"CommentSection_commentSectionContent__3tDc2\"};","import styles from \"./Comment.module.scss\";\nimport { useState, useEffect } from \"react\";\nimport { formatDistance } from \"date-fns\";\n\nimport { databaseApi, VoteType } from \"app/articlesSlice\";\n\nimport CheckboxButton from \"components/UI/CheckboxButton\";\n\nexport interface UserModel {\n  name: string;\n  avatar: string;\n}\n\ntype MongoDBRealmUserIdType = string;\nexport interface Vote {\n  userId: MongoDBRealmUserIdType;\n  // MongoDB does not know about typescript types\n  type: \"like\" | \"dislike\" | \"none\";\n}\n\nexport interface CommentModel {\n  user?: UserModel;\n  content: string;\n  createdAt: Date;\n  votes: Vote[];\n}\nexport function currentVoteTypeOfCurrentUser(votes: Vote[]) {\n  for (const vote of votes) {\n    if (vote.userId === databaseApi.applicationUser?.id) {\n      return vote.type;\n    }\n  }\n  return \"none\";\n}\n\nexport function getLikeCountAndDislikeCount(votes: Vote[]) {\n  const likeCount = votes.reduce((total, { type }) =>\n    total + ((type === \"like\") ? 1 : 0), 0);\n  const dislikeCount = votes.reduce((total, { type }) =>\n    total + ((type === \"dislike\") ? 1 : 0), 0);\n  return { likeCount, dislikeCount };\n}\n\nexport type ReplyCommentModel = CommentModel;\nexport interface TopLevelCommentModel extends CommentModel {\n  replies: ReplyCommentModel[];\n}\n\nfunction Comment({\n  comment,\n  parentId,\n  vote,\n  /*\n    When clicking on reply, and forming the message make a dispatch to\n    \n    replyToComment(articleName, parentId)\n\n    This is not here, so an easier method would just be to pass in a submit comment\n    function in the comment section to make things easier.\n  */\n  children\n}: {\n  vote: (vote: VoteType) => Promise<void>,\n  comment: CommentModel;\n  parentId?: number;\n  children?: React.ReactChild | React.ReactChild[];\n}) {\n  const {\n    commenterAvatar,\n    commenterUserName\n  } = (comment.user) ? {\n    commenterAvatar: comment.user.avatar,\n    commenterUserName: comment.user.name,\n  } : {\n      // TODO find a better icon.\n      commenterAvatar: \"https://lh6.googleusercontent.com/-f9MhM40YFzc/AAAAAAAAAAI/AAAAAAABjbo/iG_SORRy0I4/photo.jpg\",\n      commenterUserName: \"Anonymous\",\n    };\n\n  const [voteType, setVoteType] = useState(\"none\");\n\n  useEffect(\n    function () {\n      for (const vote of comment.votes) {\n        if (vote.userId === databaseApi.applicationUser?.id) {\n          setVoteType(vote.type);\n          break;\n        }\n      }\n    },\n    []\n  );\n\n  /*\n    Careful, I'm unaware of how correct the clientside predicting is... But it looks correct\n    enough.\n  */\n  const { likeCount, dislikeCount } = getLikeCountAndDislikeCount(comment.votes);\n\n  return (\n    <div className={styles.comment}>\n      <div className={styles.commentUser}>\n        <img src={commenterAvatar} alt={commenterUserName} />\n        <div>\n          <p>{commenterUserName}</p>\n          <p>\n            {formatDistance(comment.createdAt, new Date())} ago\n          </p>\n        </div>\n      </div>\n\n      <div className={styles.commentContent}>\n        {comment.content}\n      </div>\n\n      <div className={styles.commentControls}>\n        <CheckboxButton\n          name='like'\n          styledAs='oval'\n          className={styles.commentBtn}\n          checked={\n            function () {\n              return currentVoteTypeOfCurrentUser(comment.votes) === \"like\" || voteType === \"like\";\n            }()\n          }\n          onClick={() => (async () => {\n            /*\n            Vote(Type)\n  \n            if not voted:\n              do the vote\n  \n            Vote(Type)\n  \n            if found_vote_type == type:\n              unvote();\n            else:\n              unvote();\n              vote(other_type)\n            */\n\n            // Since we're not doing replies\n            // we don't need the full vote target so this should be fine I guess.\n            if (voteType === \"like\") {\n              setVoteType(\"none\");\n            } else {\n              setVoteType(\"like\");\n            }\n            await vote(VoteType.Like);\n          })()}>\n          <span className='material-icons'>\n            thumb_up\n          </span>\n          {likeCount}\n        </CheckboxButton>\n        <CheckboxButton\n          name='dislike'\n          styledAs='oval'\n          className={styles.commentBtn}\n          checked={\n            function () {\n              return currentVoteTypeOfCurrentUser(comment.votes) === \"dislike\" || voteType === \"dislike\";\n            }()\n          }\n          onClick={() => (async () => {\n            if (voteType === \"dislike\") {\n              setVoteType(\"none\");\n            } else {\n              setVoteType(\"dislike\");\n            }\n            await vote(VoteType.Dislike);\n          })()}\n        >\n          <span className='material-icons'>\n            thumb_down\n          </span>\n          {dislikeCount}\n        </CheckboxButton>\n        {/* <Button\n          styledAs='oval'\n          className={styles.commentBtn}\n        >\n          <span className='material-icons'>\n            comment\n          </span>\n          Reply\n        </Button> */}\n      </div >\n      {children}\n    </div >\n  );\n}\n\nfunction TopLevelComment({\n  comment,\n  commentId,\n  vote,\n}: {\n  comment: TopLevelCommentModel;\n  commentId: number;\n  vote: (vote: VoteType) => Promise<void>;\n}) {\n  return (\n    <Comment comment={comment} vote={vote}>\n      {/* \n      Uncomment this for reply functionality.\n\n      <>\n        <br></br>\n        {comment.replies.map((reply, index) =>\n          <Comment key={index} parentId={commentId} comment={reply}></Comment>)}\n      </> */}\n    </Comment>\n  );\n}\n\nexport default TopLevelComment;","import styles from \"./MediaShareBtns.module.scss\";\n\nimport {\n  FacebookShareButton,\n  FacebookIcon,\n  TwitterShareButton,\n  TwitterIcon,\n  RedditShareButton,\n  RedditIcon,\n} from \"react-share\";\nimport Button from \"components/UI/Button\";\n\n\nfunction MediaShareBtns({\n  title,\n}: {\n  title: string;\n}) {\n  const articleUrl = location.href;\n  const quote = `Give this article a read - ${title}`;\n  // this is someone else's job...\n  const hashtags = [\"projectenv\", \"climatechange\", \"environment\", \"recycling\"];\n\n  return (\n    <div className={styles.shareBtns}>\n      {/* WARN: facebook share is broken, could be my account */}\n      < FacebookShareButton\n        url={articleUrl}\n        quote={quote}\n        hashtag=\"#projectenv\"\n      >\n        <FacebookIcon />\n      </FacebookShareButton>\n      <TwitterShareButton\n        url={articleUrl}\n        title={quote}\n        hashtags={hashtags}\n      >\n        <TwitterIcon />\n      </TwitterShareButton>\n      <RedditShareButton\n        url={articleUrl}\n        title={quote}\n      >\n        <RedditIcon />\n      </RedditShareButton>\n      <Button\n        styledAs='oval'\n        className={styles.copyLinkBtn + \" material-icons\"}\n        onClick={async (e) => {\n          await navigator.clipboard.writeText(articleUrl);\n          const btn = e.target as HTMLButtonElement;\n\n          btn.innerHTML = \"done\";\n          btn.classList.add(styles.clicked);\n\n          setTimeout(() => {\n            btn.innerHTML = \"link\";\n            btn.classList.remove(styles.clicked);\n          }, 2000);\n        }}\n      >\n        link\n      </Button>\n    </div >\n  );\n}\n\nexport default MediaShareBtns;","import styles from \"./CheckboxCounterBtn.module.scss\";\nimport { forwardRef } from \"react\";\n\nimport CheckboxButton from \"components/UI/CheckboxButton\";\n\n\ntype CheckboxProps = Omit<Parameters<typeof CheckboxButton>[0], \"styledAs\" | \"children\">;\ntype CheckboxCounterProps = {\n  materialIcon: string,\n  counter?: number;\n} & CheckboxProps;\n\nconst CheckboxCounterBtn = forwardRef<HTMLInputElement, CheckboxCounterProps>(\n  function CheckboxCounterBtn(\n    {\n      materialIcon,\n      counter,\n      ...props\n    },\n    ref\n  ) {\n    return (\n      <div className={styles.checkboxCounterBtn}>\n        <CheckboxButton\n          ref={ref}\n          styledAs='circle'\n          {...props}\n        >\n          <span className='material-icons'>\n            {materialIcon}\n          </span>\n        </CheckboxButton >\n        <p>{counter}</p>\n      </div>\n    );\n  }\n);\n\nexport default CheckboxCounterBtn;","import styles from \"./FloatingSocialMenu.module.scss\";\nimport { useState } from \"react\";\n\nimport { Vote, VoteType } from \"app/articlesSlice\";\nimport { currentVoteTypeOfCurrentUser, getLikeCountAndDislikeCount } from \"components/Comment/Comment\";\n\nimport MediaShareBtns from \"./MediaShareBtns\";\nimport CheckboxCounterBtn from \"components/UI/CheckboxCounterBtn\";\nimport Button from \"components/UI/Button\";\n\n\nfunction FloatingSocialMenu({\n  title,\n  commentSectionRef,\n  votes,\n  vote,\n}: {\n  title: string;\n  commentSectionRef: React.RefObject<HTMLDivElement>;\n  votes: Vote[],\n  vote: (vote: VoteType) => Promise<void>,\n}) {\n  const [expandShare, setExpandShare] = useState(false);\n  const { likeCount, dislikeCount } = getLikeCountAndDislikeCount(votes);\n\n  return (\n    <div className={styles.floatingSocialMenu}>\n      <CheckboxCounterBtn\n        name='likes'\n        materialIcon='thumb_up'\n        counter={likeCount}\n        checked={(() => currentVoteTypeOfCurrentUser(votes) === \"like\")()}\n        onClick={() => (async () => { await vote(VoteType.Like); })()}\n      />\n      <CheckboxCounterBtn\n        name='dislikes'\n        materialIcon='thumb_down'\n        counter={dislikeCount}\n        checked={(() => currentVoteTypeOfCurrentUser(votes) === \"dislike\")()}\n        onClick={() => (async () => { await vote(VoteType.Dislike); })()}\n      />\n      {(expandShare) && (\n        <MediaShareBtns title={title} />\n      )}\n      <Button\n        styledAs=\"circle\"\n        onClick={() => {\n          const commentSection = commentSectionRef.current;\n          if (!commentSection) return;\n\n          const posY = commentSection.getBoundingClientRect().top + window.pageYOffset - 100;\n          window.scrollTo({ top: posY, behavior: \"smooth\" });\n        }}\n      >\n        <span className='material-icons'>\n          comment\n        </span>\n      </Button>\n      <Button\n        styledAs=\"circle\"\n        onClick={() => setExpandShare(!expandShare)}\n      >\n        <span className='material-icons'>\n          {expandShare ? \"close\" : \"share\"}\n        </span>\n      </Button>\n    </div >\n  );\n}\n\nexport default FloatingSocialMenu;\n","import styles from \"./TableOfContents.module.scss\";\nimport { HeaderInformation } from \"utils/preprocessMarkdown\";\nimport Collapsible from \"components/UI/Collapsible\";\n\n\nfunction TableOfContents({ sectionHeaders }: { sectionHeaders: HeaderInformation[]; }) {\n  return (sectionHeaders.length > 0) ? (\n    <Collapsible\n      className={styles.tableOfContents}\n      header=\"Table of Contents\"\n      centered={true}\n    >\n      <nav>\n        {\n          sectionHeaders.map(({ level, text }) => (\n            <a key={text} href={\"#\" + text}>\n              <p style={{\n                marginLeft: `${(level - 1) * 2}em`\n              }}>\n                &bull; {text}\n              </p>\n            </a>\n          ))\n        }\n      </nav>\n    </Collapsible>\n  ) : null;\n}\n\nexport default TableOfContents;","import styles from \"./TagViews.module.scss\";\n\n\nfunction TagViews({ tags }: { tags?: string[]; }) {\n  return (\n    <div className={styles.tagView}>\n      {\n        (tags) ? (\n          <>\n            <h5>This article was tagged with: </h5>\n            {tags.map((tag) => <p key={tag}>{tag}</p>)}\n          </>\n        ) : (\n          <h5>This article has not been tagged.</h5>\n        )\n      }\n    </div>\n  );\n}\n\nexport default TagViews;","import styles from \"components/Article/Article.module.scss\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { format } from \"date-fns\";\n\nimport { useAppSelector, useAppDispatch } from \"app/hooks\";\nimport { LoginType, selectLoginType } from \"app/adminSlice\";\nimport {\n  VoteType,\n  queryForArticles,\n  getCommentsOfArticle,\n  migrateArticle,\n  deleteArticle,\n  restoreArticle,\n  articleVote,\n  Article\n} from \"app/articlesSlice\";\n\nimport { validPageLink } from \"utils/functions\";\nimport { preprocessMarkdown } from \"utils/preprocessMarkdown\";\n\nimport Admin from \"pages/Admin/Admin\";\nimport FloatingSocialMenu from \"./FloatingSocialMenu\";\nimport Banner from \"./Banner\";\nimport TableOfContents from \"./TableOfContents\";\nimport TagViews from \"./TagViews\";\n\nimport Input from \"components/Form/Input\";\nimport Button from \"components/UI/Button\";\nimport MarkdownRender from \"components/Article/MarkdownRender\";\nimport { TopLevelCommentModel } from \"components/Comment/Comment\";\nimport CommentSection from \"components/Comment/CommentSection\";\n\n\nenum PageViewType {\n  Reading,\n  Editting,\n  Migration,\n}\n\ninterface ArticleProperties {\n  inRecycling: boolean,\n  article: Article,\n}\n\nfunction ArticleComponent({ article, inRecycling }: ArticleProperties) {\n  const history = useHistory();\n  const dispatch = useAppDispatch();\n  const currentLoginType = useAppSelector(selectLoginType) || LoginType.Anonymous;\n  const isAdmin = currentLoginType === LoginType.Admin;\n\n  const {\n    name,\n    content,\n    dateCreated,\n    dateModified,\n    votes\n  } = article;\n\n  const [migrationTitleName, updateMigrationTitleName] = useState(name);\n\n  const [lastViewType, updateLastViewType] = useState(PageViewType.Reading);\n  const [viewType, updateViewType] = useState(PageViewType.Reading);\n\n  const processedMarkdown = preprocessMarkdown(content);\n\n  const commentSectionRef = useRef<HTMLDivElement>(null);\n\n  const [comments, updateComments] = useState<TopLevelCommentModel[]>([]);\n\n  // We don't have direct notifications, and honestly in real time comments that can be\n  // probably hectic. So this is the best thing I could think of. This is called when you reply\n  // or comment.\n  const [commentPinger, _ucp] = useState(0);\n  function refetchComments() {\n    _ucp(commentPinger + 1);\n  }\n  // this won't be a dispatch I suppose.\n  useEffect(() => {\n    (async function () {\n      /*\n        The like state is part of our articles.\n\n        As we don't have a separate way of querying for article likes individually\n        (nor do I allow querying specific articles yet), the best solution that works\n        within our bounds is simply querying all the articles again wholesale.\n      */\n      dispatch(queryForArticles(undefined));\n      const retrievedComments = await getCommentsOfArticle(name);\n      updateComments(retrievedComments);\n    })();\n  }, [commentPinger]);\n\n  function toggleView(target: PageViewType) {\n    if (viewType !== target) {\n      updateViewType(target);\n      updateLastViewType(viewType);\n    } else {\n      updateViewType(lastViewType);\n    }\n  }\n\n  const standardAdminControls = (\n    <>\n      <Button\n        styledAs=\"oval\"\n        onClick={() => toggleView(PageViewType.Editting)}\n      >\n        Edit This Page\n      </Button>\n      <Button\n        onClick={() => toggleView(PageViewType.Migration)}\n        styledAs=\"oval\">\n        Migrate Page\n      </Button>\n    </>\n  );\n\n  const recyclingAdminControls = (\n    <>\n      <Button\n        styledAs=\"oval\"\n        onClick={async () => {\n          if (confirm(\"Do you want to restore this article?\")) {\n            await dispatch(restoreArticle(name));\n            history.push(validPageLink(name));\n          }\n        }}\n      >\n        Restore Article\n      </Button>\n    </>\n  );\n\n  return <>\n    {\n      (isAdmin) && (\n        <div id={styles.articleControls}>\n          {(!inRecycling) ? standardAdminControls : recyclingAdminControls}\n          <Button\n            styledAs=\"oval-danger\"\n            onClick={() => {\n              if (confirm((inRecycling) ? \"Permenantly delete this article?\" : \"Recycle this article?\")) {\n                dispatch(deleteArticle(name));\n                history.push(\"/\");\n              }\n            }}\n          >\n            Delete Page\n          </Button>\n\n        </div>\n      )\n    }\n    {(() => {\n      switch (viewType) {\n        case PageViewType.Reading:\n          return (\n            <>\n              <FloatingSocialMenu\n                title={name}\n                commentSectionRef={commentSectionRef}\n                votes={article.votes}\n                vote={\n                  async function (vote: VoteType) {\n                    await articleVote(currentLoginType, name, vote);\n                    refetchComments();\n                  }\n                }\n              />\n\n              {(article?.bannerImage) && (\n                <Banner bannerImage={article.bannerImage}></Banner>\n              )}\n\n              <h1 className={styles.title}> {name} </h1>\n              <div className={styles.dateView}>\n                <p>\n                  Created at {format(dateCreated, \"LLLL d, yyyy, h:mm a\")}\n                </p>\n                {(dateModified) && (\n                  <p>\n                    Last Modified at {format(dateModified, \"LLLL d, yyyy, h:mm a\")}\n                  </p>\n                )}\n              </div>\n              <TableOfContents sectionHeaders={processedMarkdown.headers} />\n              <MarkdownRender className={styles.article}>\n                {processedMarkdown.processed}\n              </MarkdownRender>\n              <CommentSection\n                articleName={article.name}\n                ref={commentSectionRef}\n                comments={comments}\n                refetchComments={refetchComments}\n              />\n              <TagViews tags={article.tags} />\n            </>\n          );\n\n        case PageViewType.Editting:\n          return isAdmin && <Admin currentArticle={article} />;\n\n        case PageViewType.Migration:\n          return (\n            <>\n              <h1>Page Migration</h1>\n              <Input\n                label=\"Migration Title\"\n                changeHandler={(e) => updateMigrationTitleName(e.target.value)}\n                defaultValue={migrationTitleName}\n                value={migrationTitleName} />\n              <Button onClick={async () => {\n                console.log(migrationTitleName, name);\n                if (migrationTitleName === name) {\n                  alert(\"You cannot migrate a page unto itself!\");\n                } else {\n                  const dispatchResult = await dispatch(migrateArticle({\n                    name,\n                    newName: migrationTitleName\n                  }));\n                  if (dispatchResult.payload) {\n                    history.push(validPageLink(migrationTitleName));\n                  }\n                }\n              }}>\n                Migrate Page\n              </Button>\n            </>\n          );\n      }\n    })()}\n  </>;\n}\n\nexport default ArticleComponent;\n","import styles from \"./CommentSection.module.scss\";\nimport React, { forwardRef } from \"react\";\nimport { addComment } from \"app/articlesSlice\";\nimport { useAppSelector } from \"app/hooks\";\nimport { LoginType, selectLoginType, selectAccountDetails } from \"app/adminSlice\";\n\nimport Form from \"components/Form/Form\";\nimport Button from \"components/UI/Button\";\nimport Comment, { TopLevelCommentModel } from \"./Comment\";\n\nimport { commentVote, VoteType } from \"app/articlesSlice\";\n\ntype CommentSectionProps = {\n  comments: TopLevelCommentModel[];\n  articleName: string;\n  refetchComments: () => void;\n} & React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\n\nconst CommentSection = forwardRef<HTMLDivElement, CommentSectionProps>(\n  function CommentSection(\n    {\n      comments,\n      articleName,\n      refetchComments,\n      ...props\n    }, ref\n  ) {\n    const loginType = useAppSelector(selectLoginType) || LoginType.Anonymous;\n    const accountDetails = useAppSelector(selectAccountDetails);\n\n    return (\n      <div\n        className={styles.commentSection}\n        ref={ref}\n        {...props}\n      >\n        <div className={styles.commentForm}>\n          <h2>Add a Comment</h2>\n          <Form\n            inputItems={{\n              comment: {\n                placeholder: \"Comment\",\n                option: \"textarea\",\n                required: true\n              }\n            }}\n            submitFn={async (input) => {\n              await addComment(loginType, accountDetails, articleName, input.comment);\n              refetchComments();\n            }}\n          >\n            <Button\n              type='submit'\n              styledAs='oval'\n            >\n              Comment\n            </Button>\n          </Form>\n        </div>\n\n        <div className={styles.commentSectionContent}>\n          <h2>Comments</h2>\n          <div>\n            {comments.map((comment, idx) =>\n              <Comment \n              key={idx}\n              commentId={idx}\n              comment={comment}\n              vote={\n                /*\n                */\n                async function (type: VoteType) {\n                  await commentVote(loginType, articleName, type, {id: idx});\n                  refetchComments();\n                }\n              } />\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default CommentSection;\n"],"sourceRoot":""}