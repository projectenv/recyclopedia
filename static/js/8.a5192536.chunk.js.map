{"version":3,"sources":["components/UI/CheckboxButton.tsx","components/UI/CheckboxButton.module.scss","components/UI/Collapsible.tsx","components/UI/Collapsible.module.scss","pages/Index/IndexPage.module.scss","pages/Index/IndexPage.tsx"],"names":["CheckedBoxButton","forwardRef","ref","name","styledAs","checked","onCheck","children","className","onChange","props","cn","styles","button","default","type","value","event","target","htmlFor","module","exports","Collapsible","header","centered","collapsed","useState","isCollapsed","setIsCollapsed","collapsibleContainer","collapsibleTitle","onClick","IndexFilter","filterSettings","updateFilters","id","tagList","tagFilters","map","filterName","active","updateTagFilter","IndexPage","articlesData","useAppSelector","selectArticlesData","allTags","selectAllTags","draftStatus","updateFilterSettings","useEffect","tag","isAdmin","selectLoginType","LoginType","Admin","index","v","dictionaryUpdateKey","filterArray","filter","articleLinks","articles","tags","result","tagFilter","to","validPageLink"],"mappings":"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","file":"static/js/8.a5192536.chunk.js","sourcesContent":["import styles from \"./CheckboxButton.module.scss\";\r\nimport { forwardRef } from \"react\";\r\nimport cn from \"classnames\";\r\n\r\n\r\ntype CheckboxProps = {\r\n  name: string;\r\n  styledAs?: \"oval\" | \"circle\";\r\n  checked?: boolean;\r\n  onCheck?: (checked: boolean) => void,\r\n  children: React.ReactNode;\r\n} & React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\nconst CheckedBoxButton = forwardRef<HTMLInputElement, CheckboxProps>(\r\n  function CheckedBoxButton(\r\n    {\r\n      name,\r\n      styledAs,\r\n      checked,\r\n      onCheck,\r\n      children,\r\n      className,\r\n      onChange,\r\n      ...props\r\n    },\r\n    ref\r\n  ) {\r\n    return (\r\n      <div\r\n        className={cn(\r\n          styles.button,\r\n          styledAs ? styles[styledAs] : styles.default\r\n        )}\r\n      >\r\n        <input\r\n          ref={ref}\r\n          type=\"checkbox\"\r\n          value={name}\r\n          checked={checked}\r\n          onChange={(event) => {\r\n            onChange?.(event);\r\n            onCheck?.(event.target.checked);\r\n          }}\r\n          {...props}\r\n        />\r\n        <label\r\n          htmlFor={name}\r\n          className={className}\r\n        >\r\n          {children}\r\n        </label>\r\n      </div >\r\n    );\r\n  }\r\n);\r\n\r\nexport default CheckedBoxButton;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"CheckboxButton_button__3sGm8\",\"oval\":\"CheckboxButton_oval__3btE3\",\"circle\":\"CheckboxButton_circle__1GmiA\"};","import styles from \"./Collapsible.module.scss\";\nimport { useState } from \"react\";\nimport cn from \"classnames\";\n\nfunction Collapsible({\n  header,\n  centered = false,\n  collapsed = false,\n  children,\n  className,\n  ...props\n}: {\n  header: string | React.ReactNode;\n  collapsed?: boolean;\n  centered?: boolean;\n  children: React.ReactNode;\n} & React.HTMLAttributes<HTMLDivElement>\n) {\n  const [isCollapsed, setIsCollapsed] = useState(collapsed);\n\n  return (\n    <div\n      className={cn(styles.collapsibleContainer, className)}\n      {...props}\n    >\n      <div\n        className={cn(styles.collapsibleTitle, {\n          [styles.centered]: centered\n        })}\n        onClick={() =>\n          setIsCollapsed((isCollapsed) => !isCollapsed)\n        }\n      >\n        <p>{header}</p>\n        <div\n          className={cn(\"material-icons\", {\n            [styles.collapsed]: isCollapsed\n          })}\n        >\n          expand_more\n        </div>\n      </div>\n\n      {(!isCollapsed) && children}\n    </div >\n  );\n}\n\nexport default Collapsible;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"collapsibleContainer\":\"Collapsible_collapsibleContainer__1frp_\",\"collapsibleTitle\":\"Collapsible_collapsibleTitle__2U45i\",\"collapsed\":\"Collapsible_collapsed__3OQ9_\",\"centered\":\"Collapsible_centered__2bh--\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"index\":\"IndexPage_index__1U2jv\",\"tagList\":\"IndexPage_tagList__2Z_2Z\",\"articleLinks\":\"IndexPage_articleLinks__2CeNU\"};","import styles from \"pages/Index/IndexPage.module.scss\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nimport { useAppSelector } from \"app/hooks\";\r\nimport { selectArticlesData, selectAllTags } from \"app/articlesSlice\";\r\nimport { LoginType, selectLoginType } from \"app/adminSlice\";\r\n\r\nimport { validPageLink, dictionaryUpdateKey } from \"utils/functions\";\r\n\r\nimport Collapsible from \"components/UI/Collapsible\";\r\nimport CheckboxButton from \"components/UI/CheckboxButton\";\r\n\r\ninterface TagFilter {\r\n  filterName: string;\r\n  active: boolean;\r\n}\r\n\r\ninterface FilterSettings {\r\n  draftStatus: boolean;\r\n  tagFilters: TagFilter[];\r\n}\r\n\r\ninterface IndexFilterProperties {\r\n  filterSettings: FilterSettings;\r\n  updateFilters: {\r\n    updateTagFilter: (id: string, newValue: boolean) => void,\r\n  };\r\n}\r\n\r\nfunction IndexFilter({ filterSettings, updateFilters }: IndexFilterProperties) {\r\n  return (\r\n    <Collapsible header='Tags'>\r\n      <div id={styles.tagList}>\r\n        {\r\n          filterSettings.tagFilters.map(({ filterName, active }) =>\r\n            <CheckboxButton\r\n              styledAs='oval'\r\n              key={filterName}\r\n              name={filterName}\r\n              checked={active}\r\n              onCheck={(checked) =>\r\n                updateFilters.updateTagFilter(filterName, checked)\r\n              }\r\n            >\r\n              {filterName}\r\n            </CheckboxButton>\r\n          )\r\n        }\r\n      </div>\r\n    </Collapsible>\r\n  );\r\n}\r\n\r\nfunction IndexPage() {\r\n  const articlesData = useAppSelector(selectArticlesData);\r\n  const allTags = useAppSelector(selectAllTags);\r\n  const [filterSettings, updateFilterSettings] = useState({ draftStatus: false, tagFilters: [] as TagFilter[] });\r\n\r\n  useEffect(\r\n    function () {\r\n      updateFilterSettings(\r\n        {\r\n          draftStatus: false,\r\n          tagFilters: allTags.map((tag) => { return { filterName: tag, active: false }; })\r\n        }\r\n      );\r\n    },\r\n    [allTags]);\r\n\r\n  const currentLoginType = useAppSelector(selectLoginType);\r\n  const isAdmin = currentLoginType === LoginType.Admin;\r\n\r\n  return (\r\n    <div className={styles.index}>\r\n      <h2>Index Page</h2>\r\n      <IndexFilter\r\n        filterSettings={filterSettings}\r\n        updateFilters={\r\n          {\r\n            updateTagFilter: function (id: string, v: boolean) {\r\n              updateFilterSettings(\r\n                dictionaryUpdateKey(\r\n                  filterSettings,\r\n                  [\"tagFilters\"],\r\n                  function (filterArray) {\r\n                    for (const filter of filterArray as TagFilter[]) {\r\n                      if (filter.filterName === id) {\r\n                        filter.active = v;\r\n                        break;\r\n                      }\r\n                    }\r\n                    return filterArray;\r\n                  }\r\n                ) as FilterSettings\r\n              );\r\n            }\r\n          }\r\n        }\r\n      />\r\n      <div className={styles.articleLinks}>\r\n        {\r\n          ((isAdmin) ?\r\n            articlesData.articles :\r\n            articlesData.articles.filter(({ draftStatus }) => !draftStatus)).\r\n            filter(function ({ tags }) {\r\n              let result = function () {\r\n                for (const tagFilter of filterSettings.tagFilters) {\r\n                  if (tagFilter.active) return false;\r\n                }\r\n                return true;\r\n              }();\r\n\r\n              if (!result) {\r\n                for (const tagFilter of filterSettings.tagFilters) {\r\n                  if (tags) {\r\n                    for (const tag of tags) {\r\n                      if (tagFilter.filterName === tag) {\r\n                        // babel can't do ||=????\r\n                        result = result || tagFilter.active;\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n\r\n              return result;\r\n            }).\r\n            map(({ name, draftStatus }) => (\r\n              <Link key={name} to={validPageLink(name)}>\r\n                <p >\r\n                  {(draftStatus) ? \"[DRAFT*] \" + name : name}\r\n                </p>\r\n              </Link>\r\n            ))\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default IndexPage;\r\n"],"sourceRoot":""}