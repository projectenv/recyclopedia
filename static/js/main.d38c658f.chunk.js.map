{"version":3,"sources":["utils/functions.js","utils/intoParsable.js","components/Article/Article.jsx","pages/Homepage.jsx","components/Form/Input.jsx","components/Form/Textarea.jsx","components/Form/Form.jsx","components/Form/Button.jsx","pages/Admin/Admin.jsx","App.jsx","reportWebVitals.js","index.jsx","components/Form/Input.module.scss","components/Form/Textarea.module.scss","components/Article/Article.module.scss","components/Form/Button.module.scss"],"names":["validPageLink","originalName","toLowerCase","replace","intoParsable","input","current_character_index","still_parsing","length","peek_character","look_ahead_offset","eat_character","result","withPreservedPosition","progn_fn","restoration_index","stillParsing","peekCharacter","requireCharacter","character","eatCharacter","consumeUntil","ending_predicate_fn","tryParseString","parsable","delimiter","acceptMultiline","successful_parse","string_contents","eatIdentifier","c","eatWhitespace","console","log","md","require","html","breaks","linkify","typographer","buildFromJSON","name","content","id","exact","path","Article","has_end","inbetween","image_tag","error","property","maybe_string","value_identifier","preprocessMarkdown","className","styles","title","article","dangerouslySetInnerHTML","__html","render","Homepage","articlesData","articles","map","to","Input","changeHandler","label","props","group","onChange","value","shrink","Textarea","Form","submitFn","children","inputItems","defaultItems","reduce","dict","item","defaultValue","useState","setInput","e","target","submitHandler","a","preventDefault","onSubmit","idx","option","Button","type","styleOption","button","Admin","setArticlesData","newData","concat","App","globalArticlesData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","basename","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.d38c658f.chunk.js","sourcesContent":["//Return the current property of a ref if it is a ref\nexport const getRefCurrent = (ref) => {\n  return ref.hasOwnProperty(\"current\")\n    ? ref.current\n    : ref;\n};\n\nexport const validPageLink = (originalName) => `/${originalName.toLowerCase().replace(\" \", \"_\")}`;","/*\r\n  Parsable is an interface produced from a string input.\r\n  \r\n  It'll convert a string into a `Parsable` object which removes the\r\n  ability to modify the string, and instead replaces it with reading\r\n  facilities that would be very useful for tokenizing or lexical analysis.\r\n  \r\n  To use just do:\r\n\r\n  object = intoParsable(\"abcdefghijklmnop\");\r\n  \r\n  There's also a few premade parsable functions that aid in building parsers.\r\n*/\r\n\r\nexport function intoParsable(input) {\r\n    // I'm internally using snake_case because I'm comfortable with it\r\n    // but everyone else uses camel case.\r\n    let current_character_index = 0;\r\n\r\n    function still_parsing() {\r\n        return (current_character_index < input.length);\r\n    }\r\n\r\n    function peek_character(look_ahead_offset=0) {\r\n        if (current_character_index + look_ahead_offset > input.length) {\r\n            return null;\r\n        } else {\r\n            return input[current_character_index + look_ahead_offset];\r\n        }\r\n    }\r\n\r\n\r\n    function require_character(character) {\r\n        if (peek_character() === character) {\r\n            eat_character();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function eat_character() {\r\n        if (current_character_index > input.length) {\r\n            return null;\r\n        } else {\r\n            const result = peek_character();\r\n            current_character_index++;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function consume_until(ending_predicate_fn) {\r\n        let result = \"\";\r\n\r\n        while (still_parsing()) {\r\n            if (ending_predicate_fn()) {\r\n                break;\r\n            } else {\r\n                result += eat_character();\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function with_preserved_position(progn_fn) {\r\n        const restoration_index = current_character_index;\r\n        let result = progn_fn();\r\n        current_character_index = restoration_index;\r\n        return result;\r\n    }\r\n\r\n    return {\r\n        withPreservedPosition: with_preserved_position,\r\n        stillParsing: still_parsing,\r\n        peekCharacter: peek_character,\r\n        requireCharacter: require_character,\r\n        eatCharacter: eat_character,\r\n        consumeUntil: consume_until,\r\n    };\r\n}\r\n\r\n// TODO(jerry): add escaped characters!\r\nexport function tryParseString(parsable, {delimiter, acceptMultiline}) {\r\n    if (parsable.requireCharacter(delimiter)) {\r\n        let successful_parse = true;\r\n        let string_contents = parsable.consumeUntil(\r\n            function() {\r\n                if (!acceptMultiline && parsable.requireCharacter('\\n')) {\r\n                    successful_parse = false;\r\n                    return true;\r\n                } else if (parsable.requireCharacter(delimiter)) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n        )\r\n        if (string_contents && successful_parse) {\r\n            return string_contents;\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n// Pairs are singular characters unfortunately.\r\n// not strings.\r\nexport function matchedQuotePairs(parsable) {\r\n    return true;\r\n    return parsable.withPreservedPosition(\r\n        function() {\r\n            let count = 0;\r\n\r\n            while (parsable.stillParsing()) {\r\n                if (parsable.requireCharacter('\\\\')) {\r\n                    parsable.eatCharacter();\r\n                } else {\r\n                    if (parsable.requireCharacter('\\'')) {\r\n                        count++;\r\n                    }\r\n                    parsable.eatCharacter();\r\n                }\r\n            }\r\n\r\n            return (count % 2 === 0);\r\n        }\r\n    );\r\n}\r\n\r\n// console.log(tryParseString(intoParsable('\\'Hello\\nWorld!\\'|'), {delimiter: '\\'', acceptMultiline: true}));\r\n// console.log(tryParseString(intoParsable('\\'Hello\\nWorld!\\'|'), {delimiter: '\\''}));\r\n\r\nconst is_literal_acceptable = (c) => (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9');\r\nexport function eatIdentifier(parsable) {\r\n    if (parsable.stillParsing()) {\r\n        return parsable.consumeUntil(() => !is_literal_acceptable(parsable.peekCharacter()));\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function eatWhitespace(parsable) {\r\n    while (parsable.stillParsing()) {\r\n        if (parsable.peekCharacter() == ' ') {\r\n            parsable.eatCharacter();\r\n        } else {\r\n            console.log(parsable.peekCharacter());\r\n            break;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\n\r\nimport styles from 'components/Article/Article.module.scss';\r\nimport { validPageLink } from 'utils/functions';\r\nimport { intoParsable, tryParseString, matchedQuotePairs, eatIdentifier, eatWhitespace } from 'utils/intoParsable';\r\n\r\nvar md = require('markdown-it')(\r\n  {\r\n    html: true,\r\n    breaks: true,\r\n    linkify: true,\r\n    typographer: true,\r\n  }\r\n);\r\n\r\nexport function buildFromJSON({ name, content, id }) {\r\n  return (\r\n    <Route key={name} exact path={validPageLink(name)}>\r\n      <Article name={name} content={content} />\r\n    </Route>\r\n  );\r\n}\r\n\r\n// A parsable object from a string.\r\n\r\nfunction preprocessMarkdown(input) {\r\n    let result = \"\";\r\n    input = intoParsable(input);\r\n\r\n    while (input.stillParsing()) {\r\n        if (input.requireCharacter('\\\\')) {\r\n            result += input.eatCharacter();\r\n        } else if (input.requireCharacter('@')) {\r\n            if (input.requireCharacter('@')) {\r\n                let has_end = false;\r\n                /*\r\n                  Whenever our region fails to parse it'll just refuse to output anything.\r\n                  \r\n                  @ asdf @ asdf -> @ asdf @ asdf\r\n                  @@ asdf @ asdf -> null\r\n                  @@ asdf @@ asdf -> whatever we would've parsed.\r\n                  \r\n                  if you need multiple @ signs consecutively just do\r\n                  \\@\\@ or @\\@.\r\n                 */\r\n                let inbetween = intoParsable(\r\n                    input.consumeUntil(\r\n                        function() {\r\n                            if (input.requireCharacter('\\n')) {\r\n                                return true;\r\n                            } else if (input.requireCharacter('@')) {\r\n                                /*\r\n                                  When we encounter an @ sign, it's likely to be the end of parsing a \"region\".\r\n                                 */\r\n                                if (input.requireCharacter('@')) {\r\n                                    has_end = true;\r\n                                }\r\n                                return true;\r\n                            }\r\n                            return false;\r\n                        }\r\n                    )\r\n                );\r\n\r\n                if (inbetween && has_end) {\r\n                    let image_tag = \"<img \";\r\n                    let error = false;\r\n                    \r\n                    while (inbetween.stillParsing() && !error) {\r\n                        eatWhitespace(inbetween);\r\n                        let property = eatIdentifier(inbetween);\r\n                        if (property) {\r\n                            image_tag += property;\r\n                            eatWhitespace(inbetween);\r\n                            if (inbetween.requireCharacter('=')) {\r\n                                image_tag += \"=\";\r\n                                eatWhitespace(inbetween);\r\n                                if (inbetween.peekCharacter() === '\\'') {\r\n                                    let maybe_string = tryParseString(inbetween, {delimiter: '\\''});\r\n                                    if (maybe_string) {\r\n                                        image_tag += '\\'' + maybe_string + '\\'';\r\n                                    } else {\r\n                                        console.error(\"No string value?\");\r\n                                        error = true;\r\n                                    }\r\n                                } else {\r\n                                    let value_identifier = eatIdentifier(inbetween);\r\n                                    if (value_identifier) {\r\n                                        image_tag += value_identifier;\r\n                                    } else {\r\n                                        console.error(\"No value identifier?\");\r\n                                        error = true;\r\n                                    }\r\n                                }\r\n                                eatWhitespace(inbetween);\r\n                                if (!inbetween.requireCharacter('|')) {\r\n                                    if (eatIdentifier(inbetween) || tryParseString(inbetween, {delimiter: '\\''})) {\r\n                                        console.error(\"Missing pipe separator!\");\r\n                                        error = true;\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                console.error(\"Missing assignment for property?\");\r\n                                error = true;\r\n                            }\r\n                        } else {\r\n                            console.error(\"Could not find property name!\");\r\n                            error = true;\r\n                        }\r\n                        image_tag += \" \";\r\n                    }\r\n                    image_tag += \"/>\";\r\n                    if (!error) {\r\n                        result += image_tag;\r\n                    } else {\r\n                        console.log(\"error happened\");\r\n                    }\r\n                } else {\r\n                    // not valid tag. Don't do anything.\r\n                    // maybe add a newline since there should really only be one image per\r\n                    // line as per markup style.\r\n                    result += '\\n';\r\n                }\r\n            } else {\r\n                result += '@';\r\n            }\r\n        } else {\r\n            result += input.eatCharacter();\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nconst TEXT = `\r\n@@src = 'https://i.ibb.co/kyXHS0n/8-Bit-Deck-Assets.png' | alt='this is alt' | style='width: 170px; height: 500px;'@@\r\n@@src = https://i.ibb.co/kyXHS0n/8-Bit-Deck-Assets.png' | alt='this is alt' | style='width: 170px; height: 500px;'@@\r\n\r\n[asd](\"asdoapos\")\r\n\r\n---\r\n__Advertisement :)__\r\n\r\n- __[pica](https://nodeca.github.io/pica/demo/)__ - high quality and fast image\r\n  resize in browser.\r\n- __[babelfish](https://github.com/nodeca/babelfish/)__ - developer friendly\r\n  i18n with plurals support and easy syntax.\r\n\r\nYou will like those projects!\r\n\r\n---\r\n\r\n# h1 Heading 8-)\r\n## h2 Heading\r\n### h3 Heading\r\n#### h4 Heading\r\n##### h5 Heading\r\n###### h6 Heading\r\n\r\n\r\n## Horizontal Rules\r\n\r\n___\r\n\r\n---\r\n\r\n***\r\n\r\n\r\n## Typographic replacements\r\n\r\nEnable typographer option to see result.\r\n\r\n(c) (C) (r) (R) (tm) (TM) (p) (P) +-\r\n\r\ntest.. test... test..... test?..... test!....\r\n\r\n!!!!!! ???? ,,  -- ---\r\n\r\n\"Smartypants, double quotes\" and 'single quotes'\r\n\r\n\r\n## Emphasis\r\n\r\n**This is bold text**\r\n\r\n__This is bold text__\r\n\r\n*This is italic text*\r\n\r\n_This is italic text_\r\n\r\n~~Strikethrough~~\r\n\r\n\r\n## Blockquotes\r\n\r\n\r\n> Blockquotes can also be nested...\r\n>> ...by using additional greater-than signs right next to each other...\r\n> > > ...or with spaces between arrows.\r\n\r\n\r\n## Lists\r\n\r\nUnordered\r\n\r\n+ Create a list by starting a line with \\`+\\`, \\`-\\`, or \\`*\\`\r\n+ Sub-lists are made by indenting 2 spaces:\r\n  - Marker character change forces new list start:\r\n    * Ac tristique libero volutpat at\r\n    + Facilisis in pretium nisl aliquet\r\n    - Nulla volutpat aliquam velit\r\n+ Very easy!\r\n\r\nOrdered\r\n\r\n1. Lorem ipsum dolor sit amet\r\n2. Consectetur adipiscing elit\r\n3. Integer molestie lorem at massa\r\n\r\n\r\n1. You can use sequential numbers...\r\n1. ...or keep all the numbers as \\`1.\\`\r\n\r\nStart numbering with offset:\r\n\r\n57. foo\r\n1. bar\r\n\r\n\r\n## Code\r\n\r\nInline \\`code\\`\r\n\r\nIndented code\r\n\r\n    // Some comments\r\n    line 1 of code\r\n    line 2 of code\r\n    line 3 of code\r\n\r\n\r\nBlock code \"fences\"\r\n\r\n\\`\\`\\`\r\nSample text here...\r\n\\`\\`\\`\r\n\r\nSyntax highlighting\r\n\r\n\\`\\`\\` js\r\nvar foo = function (bar) {\r\n  return bar++;\r\n};\r\n\r\nconsole.log(foo(5));\r\n\\`\\`\\`\r\n\r\n## Tables\r\n\r\n| Option | Description |\r\n| ------ | ----------- |\r\n| data   | path to data files to supply the data that will be passed into templates. |\r\n| engine | engine to be used for processing templates. Handlebars is the default. |\r\n| ext    | extension to be used for dest files. |\r\n\r\nRight aligned columns\r\n\r\n| Option | Description |\r\n| ------:| -----------:|\r\n| data   | path to data files to supply the data that will be passed into templates. |\r\n| engine | engine to be used for processing templates. Handlebars is the default. |\r\n| ext    | extension to be used for dest files. |\r\n\r\n\r\n## Links\r\n\r\n[link text](http://dev.nodeca.com)\r\n\r\n[link with title](http://nodeca.github.io/pica/demo/ \"title text!\")\r\n\r\nAutoconverted link https://github.com/nodeca/pica (enable linkify to see)\r\n\r\n\r\n## Images\r\n\r\n![Minion](https://octodex.github.com/images/minion.png)\r\n![Stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\")\r\n\r\nLike links, Images also have a footnote style syntax\r\n\r\n![Alt text][id]\r\n\r\nWith a reference later in the document defining the URL location:\r\n\r\n[id]: https://octodex.github.com/images/dojocat.jpg  \"The Dojocat\"\r\n\r\n\r\n## Plugins\r\n\r\nThe killer feature of \\`markdown-it\\` is very effective support of\r\n[syntax plugins](https://www.npmjs.org/browse/keyword/markdown-it-plugin).\r\n\r\n\r\n### [Emojies](https://github.com/markdown-it/markdown-it-emoji)\r\n\r\n> Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:\r\n>\r\n> Shortcuts (emoticons): :-) :-( 8-) ;)\r\n\r\nsee [how to change output](https://github.com/markdown-it/markdown-it-emoji#change-output) with twemoji.\r\n\r\n### [Subscript](https://github.com/markdown-it/markdown-it-sub) / [Superscript](https://github.com/markdown-it/markdown-it-sup)\r\n\r\n- 19^th^\r\n- H~2~O\r\n\r\n\r\n### [\\<ins>](https://github.com/markdown-it/markdown-it-ins)\r\n\r\n++Inserted text++\r\n\r\n\r\n### [\\<mark>](https://github.com/markdown-it/markdown-it-mark)\r\n\r\n==Marked text==\r\n\r\n\r\n### [Footnotes](https://github.com/markdown-it/markdown-it-footnote)\r\n\r\nFootnote 1 link[^first].\r\n\r\nFootnote 2 link[^second].\r\n\r\nInline footnote^[Text of inline footnote] definition.\r\n\r\nDuplicated footnote reference[^second].\r\n\r\n[^first]: Footnote **can have markup**\r\n\r\n    and multiple paragraphs.\r\n\r\n[^second]: Footnote text.\r\n\r\n\r\n### [Definition lists](https://github.com/markdown-it/markdown-it-deflist)\r\n\r\nTerm 1\r\n\r\n:   Definition 1\r\nwith lazy continuation.\r\n\r\nTerm 2 with *inline markup*\r\n\r\n:   Definition 2\r\n\r\n        { some code, part of Definition 2 }\r\n\r\n    Third paragraph of definition 2.\r\n\r\n_Compact style:_\r\n\r\nTerm 1\r\n  ~ Definition 1\r\n\r\nTerm 2\r\n  ~ Definition 2a\r\n  ~ Definition 2b\r\n\r\n\r\n### [Abbreviations](https://github.com/markdown-it/markdown-it-abbr)\r\n\r\nThis is HTML abbreviation example.\r\n\r\nIt converts \"HTML\", but keep intact partial entries like \"xxxHTMLyyy\" and so on.\r\n\r\n*[HTML]: Hyper Text Markup Language\r\n\r\n### [Custom containers](https://github.com/markdown-it/markdown-it-container)\r\n\r\n::: warning\r\n*here be dragons*\r\n:::\r\n`;\r\n\r\nfunction Article({ name, content }) {\r\n    content = preprocessMarkdown(TEXT);\r\n    // content = TEXT;\r\n    return (\r\n        <div>\r\n          <h1 className={styles.title}>{name}</h1>\r\n          <div className={styles.article} dangerouslySetInnerHTML={{ __html: md.render(content) }}>\r\n          </div>\r\n          <br></br>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Article;\r\n","import { Link } from 'react-router-dom';\nimport { validPageLink } from 'utils/functions';\n\nfunction Homepage({ articlesData }) {\n  return (\n    <>\n      <h1>Welcome to Recyclopedia</h1>\n      {\n        articlesData.articles.map(({ name }) => (\n          <p key={name} >\n            <Link to={validPageLink(name)}>\n              {name}\n            </Link>\n          </p>\n        ))\n      }\n    </>\n  );\n}\n\nexport default Homepage;","import styles from 'components/Form/Input.module.scss';\n\nconst Input = ({\n  changeHandler = () => { },\n  label,\n  ...props\n}) => {\n  return (\n    <div className={styles.group}>\n      <input\n        className={styles.input}\n        onChange={changeHandler}\n        {...props}\n      />\n      {label && (\n        <label\n          className={`${props.value ? styles.shrink : ''}`}\n        >\n          {label}\n        </label>\n      )}\n    </div>\n  );\n};\n\nexport default Input;\n","import styles from 'components/Form/Textarea.module.scss';\n\nconst Textarea = ({\n  changeHandler = () => { },\n  label,\n  ...props\n}) => {\n  return (\n    <div className={styles.group}>\n      <textarea\n        className={styles.input}\n        onChange={changeHandler}\n        {...props}\n      />\n      {label && (\n        <label\n          className={`${props.value ? styles.shrink : ''}`}\n        >\n          {label}\n        </label>\n      )}\n    </div>\n  );\n};\n\nexport default Textarea;\n","import { useState } from 'react';\n\nimport Input from 'components/Form/Input';\nimport Textarea from 'components/Form/Textarea';\n\nconst Form = ({ submitFn, children, inputItems }) => {\n  const defaultItems = inputItems.reduce((\n    dict, item\n  ) => {\n    dict[item[0]] = item[2]?.defaultValue || '';\n    return dict;\n  }, {});\n\n  const [input, setInput] = useState(defaultItems);\n\n  const changeHandler = (e) => {\n    const { name, value } = e.target;\n\n    setInput({\n      ...input,\n      [name]: value\n    });\n  };\n\n  const submitHandler = async (e) => {\n    e.preventDefault();\n\n    const reset = submitFn\n      ? await submitFn(input)\n      : true;\n\n    reset && setInput(defaultItems);\n  };\n\n  return (\n    <form onSubmit={submitHandler}>\n      {\n        inputItems.map((item, idx) => (\n          item[2]?.option === 'textarea'\n            ? (\n              <Textarea\n                key={idx}\n                changeHandler={changeHandler}\n                name={item[0]}\n                value={input[item[0]]}\n                label={item[1]}\n                {...item[2]}\n              />\n            )\n            : (\n              <Input\n                key={idx}\n                changeHandler={changeHandler}\n                name={item[0]}\n                value={input[item[0]]}\n                label={item[1]}\n                {...item[2]}\n              />\n            )\n        ))\n      }\n      {children}\n    </form>\n  );\n};\n\nexport default Form;","import styles from 'components/Form/Button.module.scss';\n\nconst Button = ({\n  children = '',\n  type = 'button',\n  styleOption,\n  ...props\n}) => {\n  return (\n    <button\n      className={`${styles.button} ${styleOption ? styles[styleOption] : ''}`}\n      type={type}\n      {...props}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport Form from 'components/Form/Form';\nimport Button from 'components/Form/Button';\n\nexport default function Admin({ articlesData, setArticlesData }) {\n  function submitHandler(input) {\n    const newData = {\n      \"articles\": articlesData.articles.concat(input)\n    };\n    setArticlesData(newData);\n  }\n\n  return (\n    <div>\n      <Form\n        submitFn={submitHandler}\n        inputItems={[\n          [\"name\", \"Name\"],\n          [\"content\", \"Content\", { option: 'textarea' }]\n        ]}>\n        <Button type='submit'>Submit</Button>\n\n      </Form>\n    </div>\n  );\n}","import { Route, Switch, Link } from 'react-router-dom';\nimport globalArticlesData from 'data/articles.json';\n\nimport { buildFromJSON } from \"components/Article/Article\";\nimport Homepage from \"pages/Homepage\";\nimport Admin from \"pages/Admin/Admin\";\nimport { useState } from 'react';\n\nfunction App() {\n  const [articlesData, setArticlesData] = useState(globalArticlesData);\n\n  return (\n    <>\n      <h1>\n        <Link to=\"/\">Recyclopedia</Link>\n        <br />\n        <Link to=\"/admin\">Admin</Link>\n      </h1>\n      <Switch>\n        <Route exact path='/'>\n          <Homepage articlesData={articlesData} />\n        </Route>\n        <Route exact path='/admin'>\n          <Admin articlesData={articlesData} setArticlesData={setArticlesData} />\n        </Route>\n        {articlesData.articles.map(buildFromJSON)}\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'index.css';\nimport App from 'App';\nimport reportWebVitals from 'reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename='/recyclopedia'>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"group\":\"Input_group__17cm4\",\"input\":\"Input_input__1h3Le\",\"form-input-label\":\"Input_form-input-label__3XeeE\",\"shrink\":\"Input_shrink__1Ejxt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"group\":\"Textarea_group__2NDrV\",\"input\":\"Textarea_input__-uz-8\",\"form-input-label\":\"Textarea_form-input-label__2ygY1\",\"shrink\":\"Textarea_shrink__1v-0a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Article_title__3V4iY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__yxyJm\",\"google\":\"Button_google__4WBul\"};"],"sourceRoot":""}