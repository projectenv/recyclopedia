{"version":3,"sources":["components/UI/Collapsible.tsx","components/UI/Collapsible.module.scss","pages/Index/IndexPage.module.scss","components/UI/CheckboxButton.module.scss","components/UI/CheckboxButton.tsx","pages/Index/IndexPage.tsx"],"names":["Collapsible","header","centered","collapsed","children","props","useState","isCollapsed","setIsCollapsed","className","styles","collapsibleContainer","collapsibleTitle","onClick","module","exports","CheckedBoxButton","styledAs","checked","onCheck","button","type","value","onChange","event","target","htmlFor","IndexFilter","filterSettings","updateFilters","id","tagList","tagFilters","map","filterName","active","CheckboxButton","updateTagFilter","IndexPage","articlesData","useAppSelector","selectArticlesData","allTags","selectAllTags","draftStatus","updateFilterSettings","useEffect","tag","isAdmin","selectLoginType","LoginType","Admin","index","v","dictionaryUpdateKey","filterArray","filter","articles","tags","result","tagFilter","name","to","validPageLink"],"mappings":"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","file":"static/js/7.a9c9c3ed.chunk.js","sourcesContent":["import styles from \"./Collapsible.module.scss\";\nimport React, { useState } from \"react\";\n\nfunction Collapsible({\n  header,\n  centered = false,\n  collapsed = false,\n  children,\n  ...props\n}: {\n  header: string | React.ReactNode;\n  collapsed?: boolean;\n  centered?: boolean;\n  children: React.ReactNode;\n} & React.HTMLAttributes<HTMLDivElement>\n) {\n  const [isCollapsed, setIsCollapsed] = useState(collapsed);\n\n  return (\n    <div className={styles.collapsibleContainer} {...props}>\n      <div\n        className={styles.collapsibleTitle + \" \" + (centered && styles.centered) || \"\"}\n        onClick={() =>\n          setIsCollapsed((isCollapsed) => !isCollapsed)\n        }\n      >\n        <p>{header}</p>\n        <div className={`material-icons + ${isCollapsed ? styles.collapsed : \"\"}`}>\n          expand_more\n        </div>\n      </div>\n\n      {(!isCollapsed) && children}\n    </div>\n  );\n}\n\nexport default Collapsible;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"collapsibleContainer\":\"Collapsible_collapsibleContainer__1frp_\",\"collapsibleTitle\":\"Collapsible_collapsibleTitle__2U45i\",\"collapsed\":\"Collapsible_collapsed__3OQ9_\",\"centered\":\"Collapsible_centered__2bh--\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tagList\":\"IndexPage_tagList__2Z_2Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"CheckboxButton_button__3sGm8\"};","import styles from \"./CheckboxButton.module.scss\";\n\nfunction CheckedBoxButton({\n  children,\n  styledAs,\n  checked,\n  onCheck,\n  ...props\n}: {\n  checked?: boolean;\n  onCheck?: (checked: boolean) => void,\n  children: string;\n  styledAs?: \"oval\";\n} & React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLDivElement>, HTMLDivElement>\n) {\n  return (\n    <div\n      className={`${styles.button} ${styledAs ? styles[styledAs] : \"\"} ${props.className || \"\"}`}\n      {...props}\n    >\n      <input type=\"checkbox\"\n        value={children}\n        checked={checked}\n        onChange={(event) =>\n          onCheck?.(event.target.checked)\n        }\n      />\n      <label htmlFor={children}>{children}</label>\n    </div >\n  );\n}\n\nexport default CheckedBoxButton;\n","import styles from \"pages/Index/IndexPage.module.scss\";\nimport { Link } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\n\nimport { useAppSelector } from \"app/hooks\";\nimport { selectArticlesData, selectAllTags } from \"app/articlesSlice\";\nimport { LoginType, selectLoginType } from \"app/adminSlice\";\n\nimport { validPageLink, dictionaryUpdateKey } from \"utils/functions\";\n\nimport Collapsible from \"components/UI/Collapsible\";\nimport CheckboxButton from \"components/UI/CheckboxButton\";\n\ninterface TagFilter {\n  filterName: string;\n  active: boolean;\n}\n\ninterface FilterSettings {\n  draftStatus: boolean;\n  tagFilters: TagFilter[];\n}\n\ninterface IndexFilterProperties {\n  filterSettings: FilterSettings;\n  updateFilters: {\n    updateTagFilter: (id: string, newValue: boolean) => void,\n  };\n}\n\nfunction IndexFilter({ filterSettings, updateFilters }: IndexFilterProperties) {\n  return (\n    <Collapsible header='Tags'>\n      <div id={styles.tagList}>\n        {\n          filterSettings.tagFilters.map(({ filterName, active }) =>\n            <CheckboxButton\n              key={filterName}\n              checked={active}\n              onCheck={(checked) =>\n                updateFilters.updateTagFilter(filterName, checked)\n              }\n            >\n              {filterName}\n            </CheckboxButton>\n          )\n        }\n      </div>\n    </Collapsible>\n  );\n}\n\nfunction IndexPage() {\n  const articlesData = useAppSelector(selectArticlesData);\n  const allTags = useAppSelector(selectAllTags);\n  const [filterSettings, updateFilterSettings] = useState({ draftStatus: false, tagFilters: [] as TagFilter[] });\n\n  useEffect(\n    function () {\n      updateFilterSettings(\n        {\n          draftStatus: false,\n          tagFilters: allTags.map((tag) => { return { filterName: tag, active: false }; })\n        }\n      );\n    },\n    [allTags]);\n\n  const currentLoginType = useAppSelector(selectLoginType);\n  const isAdmin = currentLoginType === LoginType.Admin;\n\n  return (\n    <div className={styles.index}>\n      <h2>Index Page</h2>\n      <IndexFilter\n        filterSettings={filterSettings}\n        updateFilters={\n          {\n            updateTagFilter: function (id: string, v: boolean) {\n              updateFilterSettings(\n                dictionaryUpdateKey(\n                  filterSettings,\n                  [\"tagFilters\"],\n                  function (filterArray) {\n                    for (const filter of filterArray as TagFilter[]) {\n                      if (filter.filterName === id) {\n                        filter.active = v;\n                        break;\n                      }\n                    }\n                    return filterArray;\n                  }\n                ) as FilterSettings\n              );\n            }\n          }\n        }\n      />\n      {\n        ((isAdmin) ?\n          articlesData.articles :\n          articlesData.articles.filter(({ draftStatus }) => !draftStatus)).\n          filter(function ({ tags }) {\n            let result = function () {\n              for (const tagFilter of filterSettings.tagFilters) {\n                if (tagFilter.active) return false;\n              }\n              return true;\n            }();\n\n            if (!result) {\n              for (const tagFilter of filterSettings.tagFilters) {\n                if (tags) {\n                  for (const tag of tags) {\n                    if (tagFilter.filterName === tag) {\n                      // babel can't do ||=????\n                      result = result || tagFilter.active;\n                    }\n                  }\n                }\n              }\n            }\n\n            return result;\n          }).\n          map(({ name, draftStatus }) => (\n            <p key={name} >\n              <Link to={validPageLink(name)}>\n                {(draftStatus) ? \"[DRAFT*] \" + name : name}\n              </Link>\n            </p>\n          ))\n      }\n    </div>\n  );\n}\n\nexport default IndexPage;\n"],"sourceRoot":""}