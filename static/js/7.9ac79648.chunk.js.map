{"version":3,"sources":["components/UI/Button.tsx","components/UI/Button.module.scss","components/Form/Input.tsx","components/Form/Input.module.scss","pages/Admin/Account.module.scss","components/Form/Form.tsx","pages/Admin/Login.tsx","pages/Admin/Register.tsx","pages/Admin/Account.tsx"],"names":["Button","children","type","styledAs","className","props","cn","styles","button","default","module","exports","Input","changeHandler","label","value","option","readOnly","selectAllOnFocus","InputOrTextarea","inputRef","useRef","group","ref","textarea","input","onChange","onFocus","current","select","shrink","Form","submitFn","inputItems","defaultItems","Object","assign","entries","map","name","defaultValue","useState","setInput","e","target","submitHandler","a","preventDefault","onSubmit","idx","Login","_","dispatch","useAppDispatch","history","useHistory","email","placeholder","required","password","loginWithEmailAndPassword","loginResult","payload","console","log","LoginType","Anonymous","push","alert","Register","passwordConfirmation","registerAccount","Account","isNewUser","setIsNewUser","account","switchNewUser","onClick"],"mappings":"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","file":"static/js/7.9ac79648.chunk.js","sourcesContent":["import styles from \"./Button.module.scss\";\r\nimport cn from \"classnames\";\r\n\r\n\r\nfunction Button({\r\n  children,\r\n  type = \"button\",\r\n  styledAs,\r\n  className,\r\n  ...props\r\n}: {\r\n  children: React.ReactNode;\r\n  styledAs?: \"oval\";\r\n} & React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n) {\r\n  return (\r\n    <button\r\n      className={cn(\r\n        styles.button,\r\n        styledAs ? styles[styledAs] : styles.default,\r\n        className\r\n      )}\r\n      type={type}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1_sNH\",\"default\":\"Button_default__1hCTa\",\"oval\":\"Button_oval__Z1YBF\"};","import styles from \"components/Form/Input.module.scss\";\r\nimport { useRef } from \"react\";\r\nimport cn from \"classnames\";\r\n\r\nexport interface InputOptions {\r\n  type?: string,\r\n  placeholder?: string;\r\n  readOnly?: boolean;\r\n  required?: boolean;\r\n\r\n  option?: \"input\" | \"textarea\";\r\n  label?: string;\r\n  defaultValue?: string,\r\n  selectAllOnFocus?: boolean;\r\n}\r\n\r\nexport type ChangeHandler = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;\r\n\r\nconst Input = ({\r\n  changeHandler,\r\n  label,\r\n  value,\r\n  option,\r\n  readOnly,\r\n  selectAllOnFocus,\r\n  ...props\r\n}: {\r\n  changeHandler?: ChangeHandler;\r\n  name?: string;\r\n  label?: string;\r\n  value: string;\r\n} & InputOptions\r\n) => {\r\n  const InputOrTextarea = option || \"input\";\r\n  const inputRef = useRef<HTMLInputElement & HTMLTextAreaElement>(null);\r\n\r\n  return (\r\n    <div className={styles.group}>\r\n      <InputOrTextarea\r\n        ref={inputRef}\r\n        className={(\r\n          option === \"textarea\"\r\n        ) ? styles.textarea\r\n          : styles.input\r\n        }\r\n        onChange={changeHandler}\r\n        {...((\r\n          selectAllOnFocus\r\n        ) && {\r\n          onFocus: () => inputRef.current?.select()\r\n        })}\r\n        {...((\r\n          readOnly\r\n        ) && {\r\n          readOnly: true\r\n        })}\r\n        {...props}\r\n      />\r\n      {\r\n        label && (\r\n          <label\r\n            className={cn({ [styles.shrink]: value })}\r\n          >\r\n            {label}\r\n          </label>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"group\":\"Input_group___CkTD\",\"form-input-label\":\"Input_form-input-label__3LBb9\",\"shrink\":\"Input_shrink__1Oknc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"account\":\"Account_account__vM1fm\",\"switchNewUser\":\"Account_switchNewUser__pz8yz\"};","import { useState } from \"react\";\r\n\r\nimport Input, { InputOptions, ChangeHandler } from \"components/Form/Input\";\r\n\r\n\r\nfunction Form<\r\n  T extends Record<string, InputOptions>\r\n>({\r\n  submitFn,\r\n  inputItems,\r\n  children,\r\n  className,\r\n  ...props\r\n}: {\r\n  submitFn?: (inputItems: Record<keyof T, string>) => void | Promise<void>;\r\n  inputItems: T;\r\n  children?: React.ReactNode;\r\n} & React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLFormElement>, HTMLFormElement>\r\n) {\r\n\r\n  const defaultItems = Object.assign(\r\n    Object.entries(inputItems).map(([name, value]) => ({\r\n      [name]: value.defaultValue || \"\"\r\n    }))\r\n  );\r\n\r\n  const [input, setInput] = useState(defaultItems);\r\n\r\n  const changeHandler: ChangeHandler = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    setInput({\r\n      ...input,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  const submitHandler = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    await submitFn?.(input);\r\n    setInput(defaultItems);\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className={className}\r\n      onSubmit={submitHandler}\r\n      {...props}\r\n    >\r\n      {\r\n        Object.entries(inputItems).map(([name, value], idx) => (\r\n          <Input\r\n            key={idx}\r\n            changeHandler={changeHandler}\r\n            name={name}\r\n            value={input[name]}\r\n            {...value}\r\n          />\r\n        ))\r\n      }\r\n      {children}\r\n    </ form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import { useHistory } from \"react-router-dom\";\n\nimport { useAppDispatch } from \"app/hooks\";\nimport { LoginAttemptResult, loginWithEmailAndPassword, LoginType } from \"app/adminSlice\";\n\nimport Form from \"components/Form/Form\";\nimport Button from \"components/UI/Button\";\n\n\nfunction Login(_: Record<string, never>) {\n  const dispatch = useAppDispatch();\n  const history = useHistory();\n  return (\n    <>\n      <h1>Login With Your Account!</h1>\n      <Form\n        inputItems={{\n          email: {\n            selectAllOnFocus: true,\n            placeholder: \"Email\",\n            required: true,\n          },\n          password: {\n            selectAllOnFocus: true,\n            type: \"password\",\n            placeholder: \"Password\",\n            required: true,\n          }\n        }}\n        submitFn={async (input) => {\n          const loginResult = (await dispatch(loginWithEmailAndPassword(input))).payload as LoginAttemptResult;\n          console.log(loginResult);\n\n          if (loginResult.type !== LoginType.Anonymous) {\n            history.push(\"/\");\n          } else {\n            alert(\"bad login\");\n          }\n        }}\n      >\n        <Button type='submit'>\n          Login\n        </Button>\n      </Form>\n    </>\n  );\n}\n\nexport default Login;","import styles from \"pages/Admin/Register.module.scss\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { useAppDispatch } from \"app/hooks\";\nimport { registerAccount } from \"app/adminSlice\";\n\nimport Form from \"components/Form/Form\";\nimport Button from \"components/UI/Button\";\n\n\nfunction Register(_: Record<string, never>) {\n  const dispatch = useAppDispatch();\n  const history = useHistory();\n\n  return (\n    <>\n      <h1>Register a New Account!</h1>\n      <Form\n        inputItems={{\n          email: {\n            selectAllOnFocus: true,\n            placeholder: \"Email\",\n            required: true,\n          },\n          password: {\n            selectAllOnFocus: true,\n            placeholder: \"Password\",\n            type: \"password\",\n            required: true,\n          },\n          passwordConfirmation: {\n            selectAllOnFocus: true,\n            placeholder: \"Confirm Password\",\n            type: \"password\",\n            required: true,\n          }\n        }}\n        submitFn={async (input) => {\n          if (input.password === input.passwordConfirmation) {\n            await registerAccount({ email: input.email, password: input.password });\n          } else {\n            alert(\"Passwords do not match!\");\n          }\n        }}\n      >\n        <Button type='submit'>Register Account</Button>\n      </Form>\n    </>\n  );\n}\n\nexport default Register;","import styles from \"./Account.module.scss\";\nimport { useState } from \"react\";\n\nimport Button from \"components/UI/Button\";\nimport Login from \"./Login\";\nimport Register from \"./Register\";\n\n\nfunction Account() {\n  const [isNewUser, setIsNewUser] = useState(false);\n  return (\n    <div className={styles.account}>\n      <div className={styles.switchNewUser}>\n        {isNewUser ? \"Returning user?\" : \"New user?\"}\n        <Button\n          styledAs=\"oval\"\n          onClick={() => setIsNewUser(!isNewUser)}\n        >\n          {isNewUser ? \"Login\" : \"Register\"}\n        </Button>\n      </div>\n      \n      {(isNewUser) ? (\n        <Register />\n      ) : (\n        <Login />\n      )}\n    </div>\n  );\n}\n\nexport default Account;"],"sourceRoot":""}