{"version":3,"sources":["components/UI/Button.tsx","components/UI/Button.module.scss","components/Form/Input.tsx","components/Form/Input.module.scss","pages/Admin/Account.module.scss","components/Form/Form.tsx","pages/Admin/Login.tsx","pages/Admin/Register.tsx","pages/Admin/Account.tsx"],"names":["Button","children","type","styledAs","className","props","styles","button","default","module","exports","Input","changeHandler","label","value","option","readOnly","selectAllOnFocus","InputOrTextarea","inputRef","useRef","group","ref","textarea","input","onChange","onFocus","current","select","shrink","Form","submitFn","inputItems","defaultItems","Object","assign","entries","map","name","defaultValue","useState","setInput","e","target","submitHandler","a","preventDefault","onSubmit","idx","Login","_","dispatch","useAppDispatch","history","useHistory","email","placeholder","required","password","loginWithEmailAndPassword","loginResult","payload","console","log","LoginType","Anonymous","push","alert","Register","passwordConfirmation","registerAccount","Account","isNewUser","setIsNewUser","account","switchNewUser","onClick"],"mappings":"kJA4BeA,IA1Bf,YAUG,IATDC,EASA,EATAA,SASA,IARAC,YAQA,MARO,SAQP,EAPAC,EAOA,EAPAA,SACAC,EAMA,EANAA,UACGC,EAKH,0DACA,OACE,gDACED,UAAS,oBACLE,IAAOC,OADF,sBAELJ,EAAWG,IAAOH,GAAYG,IAAOE,QAFhC,sBAGLJ,GAAa,GAHR,YAKTF,KAAMA,GACFG,GAPN,aASGJ,O,oBCtBPQ,EAAOC,QAAU,CAAC,OAAS,uBAAuB,QAAU,wBAAwB,KAAO,uB,oFCqE5EC,IArDD,SAAC,GAcT,IAbJC,EAaG,EAbHA,cACAC,EAYG,EAZHA,MACAC,EAWG,EAXHA,MACAC,EAUG,EAVHA,OACAC,EASG,EATHA,SACAC,EAQG,EARHA,iBACGZ,EAOA,wFACGa,EAAkBH,GAAU,QAC5BI,EAAWC,iBAA+C,MAEhE,OACE,sBAAKhB,UAAWE,IAAOe,MAAvB,UACE,cAACH,EAAD,qCACEI,IAAKH,EACLf,UACa,aAAXW,EACET,IAAOiB,SACPjB,IAAOkB,MAEXC,SAAUb,GAERK,GACG,CACHS,QAAS,kCAAMP,EAASQ,eAAf,aAAM,EAAkBC,YAGjCZ,GACG,CACHA,UAAU,IAERX,IAGJQ,GACE,uBACET,UAAS,UAAKU,EAAQR,IAAOuB,OAAS,IADxC,SAGGhB,S,oBC7DbJ,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,mBAAmB,gCAAgC,OAAS,wB,oBCA3GD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,iC,2KCkEtDoB,MA/Df,YAaG,IAVDC,EAUA,EAVAA,SACAC,EASA,EATAA,WACA/B,EAQA,EARAA,SACAG,EAOA,EAPAA,UASM6B,GAFN,gEAEqBC,OAAOC,OAC1BD,OAAOE,QAAQJ,GAAYK,KAAI,mCAAEC,EAAF,KAAQxB,EAAR,2BAC5BwB,EAAOxB,EAAMyB,cAAgB,SAJlC,EAQ0BC,mBAASP,GARnC,mBAQOT,EARP,KAQciB,EARd,KAUM7B,EAA+B,SAAC8B,GAAO,IAAD,EAClBA,EAAEC,OAAlBL,EADkC,EAClCA,KAAMxB,EAD4B,EAC5BA,MAEd2B,EAAS,2BACJjB,GADG,kBAELc,EAAOxB,MAIN8B,EAAa,uCAAG,WAAOF,GAAP,SAAAG,EAAA,yDACpBH,EAAEI,kBAEYf,EAHM,gCAIVA,EAASP,GAJC,+CAKhB,EALgB,aAOXiB,EAASR,GAPE,4CAAH,sDAUnB,OACE,uBACE7B,UAAS,UAAKA,GAAa,IAC3B2C,SAAUH,EAFZ,UAKIV,OAAOE,QAAQJ,GAAYK,KAAI,WAAgBW,GAAhB,uBAAEV,EAAF,KAAQxB,EAAR,YAC7B,cAACH,EAAA,EAAD,aAEEC,cAAeA,EACf0B,KAAMA,EACNxB,MAAOU,EAAMc,IACTxB,GAJCkC,MAQV/C,MCdQgD,MAvCf,SAAeC,GACb,IAAMC,EAAWC,cACXC,EAAUC,cAChB,OACE,qCACE,0DACA,cAAC,EAAD,CACEtB,WAAY,CACVuB,MAAO,CACLtC,kBAAkB,EAClBuC,YAAa,QACbC,UAAU,GAEZC,SAAU,CACRzC,kBAAkB,EAClBf,KAAM,WACNsD,YAAa,WACbC,UAAU,IAGd1B,SAAQ,uCAAE,WAAOP,GAAP,eAAAqB,EAAA,sEACmBM,EAASQ,YAA0BnC,IADtD,OACFoC,EADE,OAC+DC,QACvEC,QAAQC,IAAIH,GAERA,EAAY1D,OAAS8D,IAAUC,UACjCZ,EAAQa,KAAK,KAEbC,MAAM,aAPA,2CAAF,sDAdV,SAyBE,cAACnE,EAAA,EAAD,CAAQE,KAAK,SAAb,yBCWOkE,MAzCf,SAAkBlB,GAIhB,OAHiBE,cACDE,cAGd,qCACE,yDACA,cAAC,EAAD,CACEtB,WAAY,CACVuB,MAAO,CACLtC,kBAAkB,EAClBuC,YAAa,QACbC,UAAU,GAEZC,SAAU,CACRzC,kBAAkB,EAClBuC,YAAa,WACbtD,KAAM,WACNuD,UAAU,GAEZY,qBAAsB,CACpBpD,kBAAkB,EAClBuC,YAAa,mBACbtD,KAAM,WACNuD,UAAU,IAGd1B,SAAQ,uCAAE,WAAOP,GAAP,SAAAqB,EAAA,yDACJrB,EAAMkC,WAAalC,EAAM6C,qBADrB,gCAEAC,YAAgB,CAAEf,MAAO/B,EAAM+B,MAAOG,SAAUlC,EAAMkC,WAFtD,6BAINS,MAAM,2BAJA,2CAAF,sDApBV,SA4BE,cAACnE,EAAA,EAAD,CAAQE,KAAK,SAAb,oCCdOqE,UAvBf,WAAoB,IAAD,EACiB/B,oBAAS,GAD1B,mBACVgC,EADU,KACCC,EADD,KAEjB,OACE,sBAAKrE,UAAWE,IAAOoE,QAAvB,UACE,sBAAKtE,UAAWE,IAAOqE,cAAvB,UACGH,EAAY,kBAAoB,YACjC,cAACxE,EAAA,EAAD,CACEG,SAAS,OACTyE,QAAS,kBAAMH,GAAcD,IAF/B,SAIGA,EAAY,QAAU,gBAIzBA,EACA,cAAC,EAAD,IAEA,cAAC,EAAD","file":"static/js/5.9ce4c69f.chunk.js","sourcesContent":["import styles from \"./Button.module.scss\";\r\n\r\nfunction Button({\r\n  children,\r\n  type = \"button\",\r\n  styledAs,\r\n  className,\r\n  ...props\r\n}: {\r\n  children: string;\r\n  styledAs?: \"oval\";\r\n} & React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n) {\r\n  return (\r\n    <button\r\n      className={`\r\n        ${styles.button} \r\n        ${styledAs ? styles[styledAs] : styles.default} \r\n        ${className || \"\"}\r\n      `}\r\n      type={type}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1_sNH\",\"default\":\"Button_default__1hCTa\",\"oval\":\"Button_oval__Z1YBF\"};","import styles from \"components/Form/Input.module.scss\";\nimport { useRef } from \"react\";\n\nexport interface InputOptions {\n  type?: string,\n  placeholder?: string;\n  readOnly?: boolean;\n  required?: boolean;\n\n  option?: \"input\" | \"textarea\";\n  label?: string;\n  defaultValue?: string,\n  selectAllOnFocus?: boolean;\n}\n\nexport type ChangeHandler = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;\n\nconst Input = ({\n  changeHandler,\n  label,\n  value,\n  option,\n  readOnly,\n  selectAllOnFocus,\n  ...props\n}: {\n  changeHandler?: ChangeHandler;\n  name?: string;\n  label?: string;\n  value: string;\n} & InputOptions\n) => {\n  const InputOrTextarea = option || \"input\";\n  const inputRef = useRef<HTMLInputElement & HTMLTextAreaElement>(null);\n\n  return (\n    <div className={styles.group}>\n      <InputOrTextarea\n        ref={inputRef}\n        className={(\n          option === \"textarea\"\n        ) ? styles.textarea\n          : styles.input\n        }\n        onChange={changeHandler}\n        {...((\n          selectAllOnFocus\n        ) && {\n          onFocus: () => inputRef.current?.select()\n        })}\n        {...((\n          readOnly\n        ) && {\n          readOnly: true\n        })}\n        {...props}\n      />\n      {\n        label && (\n          <label\n            className={`${value ? styles.shrink : \"\"}`}\n          >\n            {label}\n          </label>\n        )\n      }\n    </div>\n  );\n};\n\nexport default Input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"group\":\"Input_group___CkTD\",\"form-input-label\":\"Input_form-input-label__3LBb9\",\"shrink\":\"Input_shrink__1Oknc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"account\":\"Account_account__vM1fm\",\"switchNewUser\":\"Account_switchNewUser__pz8yz\"};","import { useState, FormEvent } from \"react\";\r\n\r\nimport Input, { InputOptions, ChangeHandler } from \"components/Form/Input\";\r\n\r\nfunction Form<\r\n  T extends { [name: string]: InputOptions; }\r\n>({\r\n  submitFn,\r\n  inputItems,\r\n  children,\r\n  className,\r\n  ...props\r\n}: {\r\n  submitFn?: (inputItems: Record<keyof T, string>) => void | boolean | Promise<boolean | void>;\r\n  inputItems: T;\r\n  children?: React.ReactNode;\r\n} & React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLFormElement>, HTMLFormElement>\r\n) {\r\n\r\n  const defaultItems = Object.assign(\r\n    Object.entries(inputItems).map(([name, value]) => ({\r\n      [name]: value.defaultValue || \"\"\r\n    }))\r\n  );\r\n\r\n  const [input, setInput] = useState(defaultItems);\r\n\r\n  const changeHandler: ChangeHandler = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    setInput({\r\n      ...input,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  const submitHandler = async (e: FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    const reset = submitFn\r\n      ? await submitFn(input)\r\n      : true;\r\n\r\n    reset && setInput(defaultItems);\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className={`${className || \"\"}`}\r\n      onSubmit={submitHandler}\r\n    >\r\n      {\r\n        Object.entries(inputItems).map(([name, value], idx) => (\r\n          <Input\r\n            key={idx}\r\n            changeHandler={changeHandler}\r\n            name={name}\r\n            value={input[name]}\r\n            {...value}\r\n          />\r\n        ))\r\n      }\r\n      {children}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import { useHistory } from \"react-router-dom\";\r\n\r\nimport { useAppDispatch } from \"app/hooks\";\r\nimport { LoginAttemptResult, loginWithEmailAndPassword, LoginType } from \"app/adminSlice\";\r\n\r\nimport Form from \"components/Form/Form\";\r\nimport Button from \"components/UI/Button\";\r\n\r\n\r\nfunction Login(_: Record<string, never>) {\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  return (\r\n    <>\r\n      <h1>Login With Your Account!</h1>\r\n      <Form\r\n        inputItems={{\r\n          email: {\r\n            selectAllOnFocus: true,\r\n            placeholder: \"Email\",\r\n            required: true,\r\n          },\r\n          password: {\r\n            selectAllOnFocus: true,\r\n            type: \"password\",\r\n            placeholder: \"Password\",\r\n            required: true,\r\n          }\r\n        }}\r\n        submitFn={async (input) => {\r\n          const loginResult = (await dispatch(loginWithEmailAndPassword(input))).payload as LoginAttemptResult;\r\n          console.log(loginResult);\r\n\r\n          if (loginResult.type !== LoginType.Anonymous) {\r\n            history.push(\"/\");\r\n          } else {\r\n            alert(\"bad login\");\r\n          }\r\n        }}\r\n      >\r\n        <Button type='submit'>\r\n          Login\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Login;","import styles from \"pages/Admin/Register.module.scss\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { useAppDispatch } from \"app/hooks\";\r\nimport { registerAccount } from \"app/adminSlice\";\r\n\r\nimport Form from \"components/Form/Form\";\r\nimport Button from \"components/UI/Button\";\r\n\r\n\r\nfunction Register(_: Record<string, never>) {\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <>\r\n      <h1>Register a New Account!</h1>\r\n      <Form\r\n        inputItems={{\r\n          email: {\r\n            selectAllOnFocus: true,\r\n            placeholder: \"Email\",\r\n            required: true,\r\n          },\r\n          password: {\r\n            selectAllOnFocus: true,\r\n            placeholder: \"Password\",\r\n            type: \"password\",\r\n            required: true,\r\n          },\r\n          passwordConfirmation: {\r\n            selectAllOnFocus: true,\r\n            placeholder: \"Confirm Password\",\r\n            type: \"password\",\r\n            required: true,\r\n          }\r\n        }}\r\n        submitFn={async (input) => {\r\n          if (input.password === input.passwordConfirmation) {\r\n            await registerAccount({ email: input.email, password: input.password });\r\n          } else {\r\n            alert(\"Passwords do not match!\");\r\n          }\r\n        }}\r\n      >\r\n        <Button type='submit'>Register Account</Button>\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Register;","import styles from \"./Account.module.scss\";\r\nimport { useState } from \"react\";\r\n\r\nimport Button from \"components/UI/Button\";\r\nimport Login from \"./Login\";\r\nimport Register from \"./Register\";\r\n\r\n\r\nfunction Account() {\r\n  const [isNewUser, setIsNewUser] = useState(false);\r\n  return (\r\n    <div className={styles.account}>\r\n      <div className={styles.switchNewUser}>\r\n        {isNewUser ? \"Returning user?\" : \"New user?\"}\r\n        <Button\r\n          styledAs=\"oval\"\r\n          onClick={() => setIsNewUser(!isNewUser)}\r\n        >\r\n          {isNewUser ? \"Login\" : \"Register\"}\r\n        </Button>\r\n      </div>\r\n      \r\n      {(isNewUser) ? (\r\n        <Register />\r\n      ) : (\r\n        <Login />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Account;"],"sourceRoot":""}